<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\build\rtthread-stm32.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\build\rtthread-stm32.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Mar 16 03:03:55 2016
<BR><P>
<H3>Maximum Stack Usage =        720 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
application_entry &rArr; rtgui_win_create &rArr; rtgui_win_init &rArr; rtgui_widget_set_rect &rArr; rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[25]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[115]">rt_assert_handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[100]">rt_kprintf</a><BR>
 <LI><a href="#[1eb]">rtgui_widget_update_clip</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1eb]">rtgui_widget_update_clip</a><BR>
 <LI><a href="#[25d]">rtgui_widget_unfocus</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25d]">rtgui_widget_unfocus</a><BR>
 <LI><a href="#[15e]">_widget_moveto</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15e]">_widget_moveto</a><BR>
 <LI><a href="#[22b]">rtgui_type_destructors_call</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22b]">rtgui_type_destructors_call</a><BR>
 <LI><a href="#[152]">rtgui_win_destroy</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14e]">_rtgui_win_deal_close</a><BR>
 <LI><a href="#[22a]">rtgui_type_object_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22a]">rtgui_type_object_construct</a><BR>
 <LI><a href="#[122]">rtgui_container_destroy_children</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[122]">rtgui_container_destroy_children</a><BR>
 <LI><a href="#[253]">rtgui_topwin_search_in_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[253]">rtgui_topwin_search_in_list</a><BR>
 <LI><a href="#[13e]">_rtgui_topwin_preorder_map</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13e]">_rtgui_topwin_preorder_map</a><BR>
 <LI><a href="#[12f]">_rtgui_topwin_draw_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12f]">_rtgui_topwin_draw_tree</a><BR>
 <LI><a href="#[133]">_rtgui_topwin_get_focus_from_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[133]">_rtgui_topwin_get_focus_from_list</a><BR>
 <LI><a href="#[141]">_rtgui_topwin_redraw_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[141]">_rtgui_topwin_redraw_tree</a><BR>
 <LI><a href="#[143]">_rtgui_topwin_union_region_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[143]">_rtgui_topwin_union_region_tree</a><BR>
 <LI><a href="#[130]">_rtgui_topwin_free_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[130]">_rtgui_topwin_free_tree</a><BR>
 <LI><a href="#[138]">_rtgui_topwin_get_wnd_from_tree</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[138]">_rtgui_topwin_get_wnd_from_tree</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[25]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI1_IRQHandler</a> from touch.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">HardFault_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">PendSV_Handler</a> from context_rvds.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">SVC_Handler</a> from stm32f10x_it.o(i.SVC_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">SysTick_Handler</a> from board.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[50]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[15]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">USART1_IRQHandler</a> from usart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART2_IRQHandler</a> from usart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USART3_IRQHandler</a> from usart.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[a4]">_mono_draw_hline</a> from rtgui_driver.o(i._mono_draw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a6]">_mono_draw_raw_hline</a> from rtgui_driver.o(i._mono_draw_raw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a5]">_mono_draw_vline</a> from rtgui_driver.o(i._mono_draw_vline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a3]">_mono_get_pixel</a> from rtgui_driver.o(i._mono_get_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a2]">_mono_set_pixel</a> from rtgui_driver.o(i._mono_set_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[ab]">_pixel_draw_raw_hline</a> from rtgui_driver.o(i._pixel_draw_raw_hline) referenced 4 times from rtgui_driver.o(.constdata)
 <LI><a href="#[a9]">_pixel_mono_draw_hline</a> from rtgui_driver.o(i._pixel_mono_draw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[aa]">_pixel_mono_draw_vline</a> from rtgui_driver.o(i._pixel_mono_draw_vline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a8]">_pixel_mono_get_pixel</a> from rtgui_driver.o(i._pixel_mono_get_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a7]">_pixel_mono_set_pixel</a> from rtgui_driver.o(i._pixel_mono_set_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b2]">_pixel_rgb565_draw_hline</a> from rtgui_driver.o(i._pixel_rgb565_draw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b3]">_pixel_rgb565_draw_vline</a> from rtgui_driver.o(i._pixel_rgb565_draw_vline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b1]">_pixel_rgb565_get_pixel</a> from rtgui_driver.o(i._pixel_rgb565_get_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b0]">_pixel_rgb565_set_pixel</a> from rtgui_driver.o(i._pixel_rgb565_set_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[ae]">_pixel_rgb565p_draw_hline</a> from rtgui_driver.o(i._pixel_rgb565p_draw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[af]">_pixel_rgb565p_draw_vline</a> from rtgui_driver.o(i._pixel_rgb565p_draw_vline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[ad]">_pixel_rgb565p_get_pixel</a> from rtgui_driver.o(i._pixel_rgb565p_get_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[ac]">_pixel_rgb565p_set_pixel</a> from rtgui_driver.o(i._pixel_rgb565p_set_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b6]">_pixel_rgb888_draw_hline</a> from rtgui_driver.o(i._pixel_rgb888_draw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b7]">_pixel_rgb888_draw_vline</a> from rtgui_driver.o(i._pixel_rgb888_draw_vline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b5]">_pixel_rgb888_get_pixel</a> from rtgui_driver.o(i._pixel_rgb888_get_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[b4]">_pixel_rgb888_set_pixel</a> from rtgui_driver.o(i._pixel_rgb888_set_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[9b]">_rgb565_draw_hline</a> from rtgui_driver.o(i._rgb565_draw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[9c]">_rgb565_draw_vline</a> from rtgui_driver.o(i._rgb565_draw_vline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[9a]">_rgb565_get_pixel</a> from rtgui_driver.o(i._rgb565_get_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[99]">_rgb565_set_pixel</a> from rtgui_driver.o(i._rgb565_set_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a0]">_rgb565p_draw_hline</a> from rtgui_driver.o(i._rgb565p_draw_hline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[a1]">_rgb565p_draw_vline</a> from rtgui_driver.o(i._rgb565p_draw_vline) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[9f]">_rgb565p_get_pixel</a> from rtgui_driver.o(i._rgb565p_get_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[9e]">_rgb565p_set_pixel</a> from rtgui_driver.o(i._rgb565p_set_pixel) referenced from rtgui_driver.o(.constdata)
 <LI><a href="#[97]">_rtgui_app_constructor</a> from rtgui_app.o(i._rtgui_app_constructor) referenced from rtgui_app.o(.constdata)
 <LI><a href="#[98]">_rtgui_app_destructor</a> from rtgui_app.o(i._rtgui_app_destructor) referenced from rtgui_app.o(.constdata)
 <LI><a href="#[81]">_rtgui_box_constructor</a> from box.o(i._rtgui_box_constructor) referenced from box.o(.constdata)
 <LI><a href="#[82]">_rtgui_container_constructor</a> from container.o(i._rtgui_container_constructor) referenced from container.o(.constdata)
 <LI><a href="#[83]">_rtgui_container_destructor</a> from container.o(i._rtgui_container_destructor) referenced from container.o(.constdata)
 <LI><a href="#[b8]">_rtgui_object_constructor</a> from rtgui_object.o(i._rtgui_object_constructor) referenced from rtgui_object.o(.constdata)
 <LI><a href="#[b9]">_rtgui_object_destructor</a> from rtgui_object.o(i._rtgui_object_destructor) referenced from rtgui_object.o(.constdata)
 <LI><a href="#[6c]">_rtgui_topwin_mark_hidden</a> from topwin.o(i._rtgui_topwin_mark_hidden) referenced from topwin.o(i.rtgui_topwin_hide)
 <LI><a href="#[6d]">_rtgui_topwin_mark_shown</a> from topwin.o(i._rtgui_topwin_mark_shown) referenced from topwin.o(i.rtgui_topwin_show)
 <LI><a href="#[bc]">_rtgui_widget_constructor</a> from widget.o(i._rtgui_widget_constructor) referenced from widget.o(.constdata)
 <LI><a href="#[bd]">_rtgui_widget_destructor</a> from widget.o(i._rtgui_widget_destructor) referenced from widget.o(.constdata)
 <LI><a href="#[be]">_rtgui_win_constructor</a> from window.o(i._rtgui_win_constructor) referenced from window.o(.constdata)
 <LI><a href="#[bf]">_rtgui_win_destructor</a> from window.o(i._rtgui_win_destructor) referenced from window.o(.constdata)
 <LI><a href="#[ba]">_rtgui_wintitle_constructor</a> from title.o(i._rtgui_wintitle_constructor) referenced from title.o(.constdata)
 <LI><a href="#[bb]">_rtgui_wintitle_deconstructor</a> from title.o(i._rtgui_wintitle_deconstructor) referenced from title.o(.constdata)
 <LI><a href="#[5a]">application_entry</a> from demo_application.o(i.application_entry) referenced from demo_application.o(i.application_init)
 <LI><a href="#[9d]">framebuffer_draw_raw_hline</a> from rtgui_driver.o(i.framebuffer_draw_raw_hline) referenced 2 times from rtgui_driver.o(.constdata)
 <LI><a href="#[c0]">hello</a> from cmd.o(i.hello) referenced from cmd.o(FSymTab)
 <LI><a href="#[5e]">lcd_close</a> from ili_lcd_general.o(i.lcd_close) referenced from ili_lcd_general.o(i.rt_hw_lcd_init)
 <LI><a href="#[5f]">lcd_control</a> from ili_lcd_general.o(i.lcd_control) referenced from ili_lcd_general.o(i.rt_hw_lcd_init)
 <LI><a href="#[5c]">lcd_init</a> from ili_lcd_general.o(i.lcd_init) referenced from ili_lcd_general.o(i.rt_hw_lcd_init)
 <LI><a href="#[5d]">lcd_open</a> from ili_lcd_general.o(i.lcd_open) referenced from ili_lcd_general.o(i.rt_hw_lcd_init)
 <LI><a href="#[cb]">list</a> from cmd.o(i.list) referenced from cmd.o(FSymTab)
 <LI><a href="#[ca]">list_device</a> from cmd.o(i.list_device) referenced from cmd.o(FSymTab)
 <LI><a href="#[c4]">list_event</a> from cmd.o(i.list_event) referenced from cmd.o(FSymTab)
 <LI><a href="#[c6]">list_mailbox</a> from cmd.o(i.list_mailbox) referenced from cmd.o(FSymTab)
 <LI><a href="#[c8]">list_mempool</a> from cmd.o(i.list_mempool) referenced from cmd.o(FSymTab)
 <LI><a href="#[c7]">list_msgqueue</a> from cmd.o(i.list_msgqueue) referenced from cmd.o(FSymTab)
 <LI><a href="#[c5]">list_mutex</a> from cmd.o(i.list_mutex) referenced from cmd.o(FSymTab)
 <LI><a href="#[c3]">list_sem</a> from cmd.o(i.list_sem) referenced from cmd.o(FSymTab)
 <LI><a href="#[c2]">list_thread</a> from cmd.o(i.list_thread) referenced from cmd.o(FSymTab)
 <LI><a href="#[c9]">list_timer</a> from cmd.o(i.list_timer) referenced from cmd.o(FSymTab)
 <LI><a href="#[4f]">main</a> from startup.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4]">rt_hw_lcd_draw_blit_line</a> from ili_lcd_general.o(i.rt_hw_lcd_draw_blit_line) referenced 2 times from ili_lcd_general.o(.data)
 <LI><a href="#[2]">rt_hw_lcd_draw_hline</a> from ili_lcd_general.o(i.rt_hw_lcd_draw_hline) referenced 2 times from ili_lcd_general.o(.data)
 <LI><a href="#[3]">rt_hw_lcd_draw_vline</a> from ili_lcd_general.o(i.rt_hw_lcd_draw_vline) referenced 2 times from ili_lcd_general.o(.data)
 <LI><a href="#[1]">rt_hw_lcd_get_pixel</a> from ili_lcd_general.o(i.rt_hw_lcd_get_pixel) referenced 2 times from ili_lcd_general.o(.data)
 <LI><a href="#[0]">rt_hw_lcd_set_pixel</a> from ili_lcd_general.o(i.rt_hw_lcd_set_pixel) referenced 2 times from ili_lcd_general.o(.data)
 <LI><a href="#[5b]">rt_init_thread_entry</a> from application.o(i.rt_init_thread_entry) referenced from application.o(i.rt_application_init)
 <LI><a href="#[62]">rt_serial_close</a> from serial.o(i.rt_serial_close) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[65]">rt_serial_control</a> from serial.o(i.rt_serial_control) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[60]">rt_serial_init</a> from serial.o(i.rt_serial_init) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[61]">rt_serial_open</a> from serial.o(i.rt_serial_open) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[63]">rt_serial_read</a> from serial.o(i.rt_serial_read) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[64]">rt_serial_write</a> from serial.o(i.rt_serial_write) referenced from serial.o(i.rt_hw_serial_register)
 <LI><a href="#[52]">rt_thread_exit</a> from thread.o(i.rt_thread_exit) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[66]">rt_thread_idle_entry</a> from idle.o(i.rt_thread_idle_entry) referenced from idle.o(i.rt_thread_idle_init)
 <LI><a href="#[53]">rt_thread_timeout</a> from thread.o(i.rt_thread_timeout) referenced from thread.o(i._rt_thread_init)
 <LI><a href="#[54]">rtgui_app_event_handler</a> from rtgui_app.o(i.rtgui_app_event_handler) referenced from rtgui_app.o(i._rtgui_app_constructor)
 <LI><a href="#[76]">rtgui_blit_line_1_2</a> from blit.o(i.rtgui_blit_line_1_2) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[79]">rtgui_blit_line_1_3</a> from blit.o(i.rtgui_blit_line_1_3) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[7c]">rtgui_blit_line_1_4</a> from blit.o(i.rtgui_blit_line_1_4) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[73]">rtgui_blit_line_2_1</a> from blit.o(i.rtgui_blit_line_2_1) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[7f]">rtgui_blit_line_2_2_inv</a> from blit.o(i.rtgui_blit_line_2_2_inv) referenced from blit.o(.constdata)
 <LI><a href="#[7a]">rtgui_blit_line_2_3</a> from blit.o(i.rtgui_blit_line_2_3) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[7d]">rtgui_blit_line_2_4</a> from blit.o(i.rtgui_blit_line_2_4) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[74]">rtgui_blit_line_3_1</a> from blit.o(i.rtgui_blit_line_3_1) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[77]">rtgui_blit_line_3_2</a> from blit.o(i.rtgui_blit_line_3_2) referenced from blit.o(.constdata)
 <LI><a href="#[80]">rtgui_blit_line_3_2_inv</a> from blit.o(i.rtgui_blit_line_3_2_inv) referenced from blit.o(.constdata)
 <LI><a href="#[7e]">rtgui_blit_line_3_4</a> from blit.o(i.rtgui_blit_line_3_4) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[75]">rtgui_blit_line_4_1</a> from blit.o(i.rtgui_blit_line_4_1) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[78]">rtgui_blit_line_4_2</a> from blit.o(i.rtgui_blit_line_4_2) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[7b]">rtgui_blit_line_4_3</a> from blit.o(i.rtgui_blit_line_4_3) referenced 2 times from blit.o(.constdata)
 <LI><a href="#[72]">rtgui_blit_line_direct</a> from blit.o(i.rtgui_blit_line_direct) referenced 7 times from blit.o(.constdata)
 <LI><a href="#[55]">rtgui_container_event_handler</a> from container.o(i.rtgui_container_event_handler) referenced from container.o(i._rtgui_container_constructor)
 <LI><a href="#[8a]">rtgui_dc_client_blit</a> from dc_client.o(i.rtgui_dc_client_blit) referenced from dc_client.o(.constdata)
 <LI><a href="#[89]">rtgui_dc_client_blit_line</a> from dc_client.o(i.rtgui_dc_client_blit_line) referenced from dc_client.o(.constdata)
 <LI><a href="#[85]">rtgui_dc_client_draw_color_point</a> from dc_client.o(i.rtgui_dc_client_draw_color_point) referenced from dc_client.o(.constdata)
 <LI><a href="#[87]">rtgui_dc_client_draw_hline</a> from dc_client.o(i.rtgui_dc_client_draw_hline) referenced from dc_client.o(.constdata)
 <LI><a href="#[84]">rtgui_dc_client_draw_point</a> from dc_client.o(i.rtgui_dc_client_draw_point) referenced from dc_client.o(.constdata)
 <LI><a href="#[86]">rtgui_dc_client_draw_vline</a> from dc_client.o(i.rtgui_dc_client_draw_vline) referenced from dc_client.o(.constdata)
 <LI><a href="#[88]">rtgui_dc_client_fill_rect</a> from dc_client.o(i.rtgui_dc_client_fill_rect) referenced from dc_client.o(.constdata)
 <LI><a href="#[8b]">rtgui_dc_client_fini</a> from dc_client.o(i.rtgui_dc_client_fini) referenced from dc_client.o(.constdata)
 <LI><a href="#[92]">rtgui_dc_hw_blit</a> from dc_hw.o(i.rtgui_dc_hw_blit) referenced from dc_hw.o(.constdata)
 <LI><a href="#[91]">rtgui_dc_hw_blit_line</a> from dc_hw.o(i.rtgui_dc_hw_blit_line) referenced from dc_hw.o(.constdata)
 <LI><a href="#[8d]">rtgui_dc_hw_draw_color_point</a> from dc_hw.o(i.rtgui_dc_hw_draw_color_point) referenced from dc_hw.o(.constdata)
 <LI><a href="#[8f]">rtgui_dc_hw_draw_hline</a> from dc_hw.o(i.rtgui_dc_hw_draw_hline) referenced from dc_hw.o(.constdata)
 <LI><a href="#[8c]">rtgui_dc_hw_draw_point</a> from dc_hw.o(i.rtgui_dc_hw_draw_point) referenced from dc_hw.o(.constdata)
 <LI><a href="#[8e]">rtgui_dc_hw_draw_vline</a> from dc_hw.o(i.rtgui_dc_hw_draw_vline) referenced from dc_hw.o(.constdata)
 <LI><a href="#[90]">rtgui_dc_hw_fill_rect</a> from dc_hw.o(i.rtgui_dc_hw_fill_rect) referenced from dc_hw.o(.constdata)
 <LI><a href="#[93]">rtgui_dc_hw_fini</a> from dc_hw.o(i.rtgui_dc_hw_fini) referenced from dc_hw.o(.constdata)
 <LI><a href="#[94]">rtgui_fnt_font_draw_text</a> from font_fnt.o(i.rtgui_fnt_font_draw_text) referenced from font_fnt.o(.constdata)
 <LI><a href="#[95]">rtgui_fnt_font_get_metrics</a> from font_fnt.o(i.rtgui_fnt_font_get_metrics) referenced from font_fnt.o(.constdata)
 <LI><a href="#[8]">rtgui_image_hdc_blit</a> from image_hdc.o(i.rtgui_image_hdc_blit) referenced 2 times from image_hdc.o(.data)
 <LI><a href="#[5]">rtgui_image_hdc_check</a> from image_hdc.o(i.rtgui_image_hdc_check) referenced 2 times from image_hdc.o(.data)
 <LI><a href="#[6]">rtgui_image_hdc_load</a> from image_hdc.o(i.rtgui_image_hdc_load) referenced 2 times from image_hdc.o(.data)
 <LI><a href="#[7]">rtgui_image_hdc_unload</a> from image_hdc.o(i.rtgui_image_hdc_unload) referenced 2 times from image_hdc.o(.data)
 <LI><a href="#[96]">rtgui_image_hdcmm_blit</a> from image_hdc.o(i.rtgui_image_hdcmm_blit) referenced from image_hdc.o(.constdata)
 <LI><a href="#[67]">rtgui_region_intersectO</a> from region.o(i.rtgui_region_intersectO) referenced from region.o(i.rtgui_region_intersect)
 <LI><a href="#[68]">rtgui_region_subtractO</a> from region.o(i.rtgui_region_subtractO) referenced from region.o(i.rtgui_region_subtract)
 <LI><a href="#[69]">rtgui_region_unionO</a> from region.o(i.rtgui_region_unionO) referenced from region.o(i.rtgui_region_union)
 <LI><a href="#[6b]">rtgui_server_entry</a> from server.o(i.rtgui_server_entry) referenced from server.o(i.rtgui_server_init)
 <LI><a href="#[6a]">rtgui_server_event_handler</a> from server.o(i.rtgui_server_event_handler) referenced from server.o(i.rtgui_server_entry)
 <LI><a href="#[56]">rtgui_widget_event_handler</a> from widget.o(i.rtgui_widget_event_handler) referenced from widget.o(i._rtgui_widget_constructor)
 <LI><a href="#[58]">rtgui_win_do_show</a> from window.o(i.rtgui_win_do_show) referenced from window.o(i._rtgui_win_constructor)
 <LI><a href="#[57]">rtgui_win_event_handler</a> from window.o(i.rtgui_win_event_handler) referenced from window.o(i._rtgui_win_constructor)
 <LI><a href="#[59]">rtgui_wintile_event_handler</a> from title.o(i.rtgui_wintile_event_handler) referenced from title.o(i._rtgui_wintitle_constructor)
 <LI><a href="#[6e]">stm32_configure</a> from usart.o(i.stm32_configure) referenced from usart.o(.constdata)
 <LI><a href="#[6f]">stm32_control</a> from usart.o(i.stm32_control) referenced from usart.o(.constdata)
 <LI><a href="#[71]">stm32_getc</a> from usart.o(i.stm32_getc) referenced from usart.o(.constdata)
 <LI><a href="#[70]">stm32_putc</a> from usart.o(i.stm32_putc) referenced from usart.o(.constdata)
 <LI><a href="#[c1]">version</a> from cmd.o(i.version) referenced from cmd.o(FSymTab)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[51]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[26b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[cc]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[cf]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[26c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[26d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[26e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[26f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[270]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[9]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[116]"></a>rt_hw_interrupt_disable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>

<P><STRONG><a name="[155]"></a>rt_hw_interrupt_enable</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>

<P><STRONG><a name="[1bb]"></a>rt_hw_context_switch</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1bc]"></a>rt_hw_context_switch_interrupt</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[11]"></a>PendSV_Handler</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c8]"></a>rt_hw_context_switch_to</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
</UL>

<P><STRONG><a name="[271]"></a>rt_hw_interrupt_thread_switch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, context_rvds.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>HardFault_Handler</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, context_rvds.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HardFault_Handler &rArr; rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[272]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>

<P><STRONG><a name="[273]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
</UL>

<P><STRONG><a name="[173]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
</UL>

<P><STRONG><a name="[cd]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[274]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[275]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[276]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[d]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, touch.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = EXTI1_IRQHandler &rArr; EXTI_Enable &rArr; EXTI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Enable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d9]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = EXTI_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Enable
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>EXTI_Init</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = EXTI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Enable
</UL>

<P><STRONG><a name="[dc]"></a>FSMC_NORSRAMCmd</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = FSMC_NORSRAMCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[dd]"></a>FSMC_NORSRAMInit</STRONG> (Thumb, 832 bytes, Stack size 8 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = FSMC_NORSRAMInit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[e3]"></a>FSMC_NORSRAMStructInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, stm32f10x_fsmc.o(i.FSMC_NORSRAMStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>

<P><STRONG><a name="[df]"></a>GPIO_Init</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>

<P><STRONG><a name="[c]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e4]"></a>NVIC_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, board.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Configuration &rArr; NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[e7]"></a>NVIC_Init</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[e5]"></a>NVIC_SetVectorTable</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, misc.o(i.NVIC_SetVectorTable))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = NVIC_SetVectorTable &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>

<P><STRONG><a name="[e2]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_AHBPeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[e8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[e1]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = RCC_APB2PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[f6]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[f]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, board.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = SysTick_Handler &rArr; rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[38]"></a>USART1_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USART1_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>USART2_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USART2_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART3_IRQHandler</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, usart.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = USART3_IRQHandler &rArr; rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_leave
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_enter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = USART_ClearITPendingBit &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>USART_Cmd</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_Cmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[f2]"></a>USART_GetFlagStatus</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = USART_GetFlagStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[ef]"></a>USART_GetITStatus</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_GetITStatus &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>USART_ITConfig</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
</UL>

<P><STRONG><a name="[f5]"></a>USART_Init</STRONG> (Thumb, 450 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
</UL>

<P><STRONG><a name="[e]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>__rt_ffs</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, kservice.o(i.__rt_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[277]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[278]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[279]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1db]"></a>_rtgui_application_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtgui_app.o(i._rtgui_application_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
</UL>

<P><STRONG><a name="[149]"></a>_rtgui_container_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, container.o(i._rtgui_container_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_unfocus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_widget_moveto
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_destructor
</UL>

<P><STRONG><a name="[264]"></a>_rtgui_win_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, window.o(i._rtgui_win_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_create
</UL>

<P><STRONG><a name="[201]"></a>_rtgui_wintitle_get_type</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, title.o(i._rtgui_wintitle_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintitle_create
</UL>

<P><STRONG><a name="[167]"></a>application_init</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, demo_application.o(i.application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[da]"></a>assert_failed</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, startup.o(i.assert_failed))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetVectorTable
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>

<P><STRONG><a name="[c0]"></a>hello</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, cmd.o(i.hello))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = hello &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[16a]"></a>lcd_Initializtion</STRONG> (Thumb, 2440 bytes, Stack size 16 bytes, ili_lcd_general.o(i.lcd_Initializtion))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = lcd_Initializtion &rArr; lcd_port_init &rArr; LCD_FSMCConfig &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_port_init
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_init
</UL>

<P><STRONG><a name="[cb]"></a>list</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, cmd.o(i.list))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = list &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[ca]"></a>list_device</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = list_device &rArr; _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c4]"></a>list_event</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_event &rArr; _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c6]"></a>list_mailbox</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_mailbox &rArr; _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c8]"></a>list_mempool</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = list_mempool &rArr; _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c7]"></a>list_msgqueue</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_msgqueue &rArr; _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c5]"></a>list_mutex</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_mutex &rArr; _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c3]"></a>list_sem</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = list_sem &rArr; _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c2]"></a>list_thread</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = list_thread &rArr; _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[c9]"></a>list_timer</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = list_timer &rArr; _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL>
<P><STRONG><a name="[4f]"></a>main</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, startup.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = main &rArr; rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[176]"></a>rt_application_init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, application.o(i.rt_application_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[115]"></a>rt_assert_handler</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, kservice.o(i.rt_assert_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_control
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_putc
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_getc
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_control
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm32_configure
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_run
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_control
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_get_metrics
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_draw
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_pixel_format
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_gc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_shaded_rect
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_unfocus
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onupdate_toplvl
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_get_rect
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_focus
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_get_extent
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_tell
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_seek
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_close
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_fill_rect
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_draw_vline
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_draw_point
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_draw_hline
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_draw_color_point
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_blit_line
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_fill_rect
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_set_extents
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_unionO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtractO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersectO
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_appendNonO
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_coalesce
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_rect
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdcmm_blit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_register_engine
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_fnt_font_get_metrics
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_fnt_font_draw_text
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_ack
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_framebuffer_get_ops
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_destory
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_recv
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_set_main_win
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_event_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_application_event_loop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_app_destructor
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_show
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_union_region_tree
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_redraw_tree
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_tree_from_root
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_in_sibling
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_preorder_map
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_only_activate
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_move_whole_tree2top
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_wnd_from_tree
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_topmost_child_shown
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_root_win
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_focus_from_list
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_free_tree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_deactivate
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_could_show
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_clip_to_region
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_clear_modal_tree
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintile_event_handler
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_modal_enter
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_kbd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_stop
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_hide
</UL>

<P><STRONG><a name="[177]"></a>rt_completion_done</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, completion.o(i.rt_completion_done))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_completion_done &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[17b]"></a>rt_completion_init</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, completion.o(i.rt_completion_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_completion_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[15b]"></a>rt_completion_wait</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, completion.o(i.rt_completion_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
</UL>

<P><STRONG><a name="[180]"></a>rt_console_set_device</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, kservice.o(i.rt_console_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_console_set_device &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_close
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[184]"></a>rt_data_queue_init</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
</UL>

<P><STRONG><a name="[187]"></a>rt_data_queue_peak</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, dataqueue.o(i.rt_data_queue_peak))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_data_queue_peak &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[188]"></a>rt_data_queue_pop</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, dataqueue.o(i.rt_data_queue_pop))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_isr
</UL>

<P><STRONG><a name="[158]"></a>rt_data_queue_push</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, dataqueue.o(i.rt_data_queue_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>

<P><STRONG><a name="[182]"></a>rt_device_close</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, device.o(i.rt_device_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[18b]"></a>rt_device_control</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, device.o(i.rt_device_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_set_device
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_screen_update
</UL>

<P><STRONG><a name="[181]"></a>rt_device_find</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(i.rt_device_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncmp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_enter_critical
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[183]"></a>rt_device_open</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, device.o(i.rt_device_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_device_open &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
</UL>

<P><STRONG><a name="[18f]"></a>rt_device_register</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, device.o(i.rt_device_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_init
</UL>

<P><STRONG><a name="[191]"></a>rt_device_write</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, device.o(i.rt_device_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_device_write &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[18c]"></a>rt_enter_critical</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, scheduler.o(i.rt_enter_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_enter_critical
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[18e]"></a>rt_exit_critical</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, scheduler.o(i.rt_exit_critical))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[11e]"></a>rt_free</STRONG> (Thumb, 248 bytes, Stack size 16 bytes, mem.o(i.rt_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_close
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_app_destructor
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_destructor
</UL>

<P><STRONG><a name="[194]"></a>rt_hw_board_init</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, board.o(i.rt_hw_board_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_hw_board_init &rArr; rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_console_set_device
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1a4]"></a>rt_hw_console_output</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, kservice.o(i.rt_hw_console_output))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>

<P><STRONG><a name="[ce]"></a>rt_hw_hard_fault_exception</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, cpuport.o(i.rt_hw_hard_fault_exception))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = rt_hw_hard_fault_exception &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[4]"></a>rt_hw_lcd_draw_blit_line</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, ili_lcd_general.o(i.rt_hw_lcd_draw_blit_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_hw_lcd_draw_blit_line &rArr; lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>rt_hw_lcd_draw_hline</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ili_lcd_general.o(i.rt_hw_lcd_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_hw_lcd_draw_hline &rArr; lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>rt_hw_lcd_draw_vline</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, ili_lcd_general.o(i.rt_hw_lcd_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_hw_lcd_draw_vline &rArr; lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>rt_hw_lcd_get_pixel</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ili_lcd_general.o(i.rt_hw_lcd_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_hw_lcd_get_pixel &rArr; lcd_read_gram &rArr; lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_gram
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BGR2RGB
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(.data)
</UL>
<P><STRONG><a name="[197]"></a>rt_hw_lcd_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, ili_lcd_general.o(i.rt_hw_lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rt_hw_lcd_init &rArr; lcd_Initializtion &rArr; lcd_port_init &rArr; LCD_FSMCConfig &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Initializtion
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[0]"></a>rt_hw_lcd_set_pixel</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, ili_lcd_general.o(i.rt_hw_lcd_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_hw_lcd_set_pixel &rArr; lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetCursor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>rt_hw_serial_isr</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, serial.o(i.rt_hw_serial_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_hw_serial_isr &rArr; rt_data_queue_pop &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_peak
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[198]"></a>rt_hw_serial_register</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, serial.o(i.rt_hw_serial_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[119]"></a>rt_hw_stack_init</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, cpuport.o(i.rt_hw_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[195]"></a>rt_hw_usart_init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, usart.o(i.rt_hw_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rt_hw_usart_init &rArr; rt_hw_serial_register &rArr; rt_device_register &rArr; rt_device_find &rArr; rt_exit_critical &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_serial_register
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Configuration
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
</UL>

<P><STRONG><a name="[5b]"></a>rt_init_thread_entry</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, application.o(i.rt_init_thread_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rt_init_thread_entry &rArr; rtgui_system_server_init &rArr; rtgui_server_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_set_device
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_system_init
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> application.o(i.rt_application_init)
</UL>
<P><STRONG><a name="[ec]"></a>rt_interrupt_enter</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[17e]"></a>rt_interrupt_get_nest</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, irq.o(i.rt_interrupt_get_nest))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[ee]"></a>rt_interrupt_leave</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, irq.o(i.rt_interrupt_leave))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_interrupt_leave
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[100]"></a>rt_kprintf</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, kservice.o(i.rt_kprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_console_output
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Initializtion
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;assert_failed
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_open
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hello
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_thread
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_device
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_application_dest_handle
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_entry
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_create_in_server
</UL>

<P><STRONG><a name="[186]"></a>rt_malloc</STRONG> (Thumb, 520 bytes, Stack size 32 bytes, mem.o(i.rt_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
</UL>

<P><STRONG><a name="[1a5]"></a>rt_mb_detach</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ipc.o(i.rt_mb_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_mb_detach &rArr; rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
</UL>

<P><STRONG><a name="[1a7]"></a>rt_mb_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, ipc.o(i.rt_mb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_mb_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
</UL>

<P><STRONG><a name="[1a8]"></a>rt_mb_recv</STRONG> (Thumb, 402 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
</UL>

<P><STRONG><a name="[1a9]"></a>rt_mb_send</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, ipc.o(i.rt_mb_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_ack
</UL>

<P><STRONG><a name="[1aa]"></a>rt_mb_send_wait</STRONG> (Thumb, 368 bytes, Stack size 48 bytes, ipc.o(i.rt_mb_send_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>

<P><STRONG><a name="[d2]"></a>rt_memcpy</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, kservice.o(i.rt_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit_line_direct
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blit565to565PixelAlpha
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_draw_raw_hline
</UL>

<P><STRONG><a name="[22f]"></a>rt_memmove</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, kservice.o(i.rt_memmove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
</UL>

<P><STRONG><a name="[118]"></a>rt_memset</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, kservice.o(i.rt_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_open
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_get_metrics
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_fnt_font_get_metrics
</UL>

<P><STRONG><a name="[1ab]"></a>rt_mq_create</STRONG> (Thumb, 170 bytes, Stack size 40 bytes, ipc.o(i.rt_mq_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
</UL>

<P><STRONG><a name="[1ad]"></a>rt_mq_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, ipc.o(i.rt_mq_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_mq_delete &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[1af]"></a>rt_mq_recv</STRONG> (Thumb, 424 bytes, Stack size 56 bytes, ipc.o(i.rt_mq_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rt_mq_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_recv
</UL>

<P><STRONG><a name="[1b0]"></a>rt_mq_send</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, ipc.o(i.rt_mq_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
</UL>

<P><STRONG><a name="[1b1]"></a>rt_mutex_init</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, ipc.o(i.rt_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_mutex_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
</UL>

<P><STRONG><a name="[1b2]"></a>rt_mutex_release</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_screen_unlock
</UL>

<P><STRONG><a name="[1b4]"></a>rt_mutex_take</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, ipc.o(i.rt_mutex_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_screen_lock
</UL>

<P><STRONG><a name="[1ac]"></a>rt_object_allocate</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, object.o(i.rt_object_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
</UL>

<P><STRONG><a name="[1ae]"></a>rt_object_delete</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, object.o(i.rt_object_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[1a6]"></a>rt_object_detach</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, object.o(i.rt_object_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[190]"></a>rt_object_init</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, object.o(i.rt_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strncpy
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_register
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1b8]"></a>rt_object_is_systemobject</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, object.o(i.rt_object_is_systemobject))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rt_object_is_systemobject &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1b9]"></a>rt_realloc</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, mem.o(i.rt_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;plug_holes
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
</UL>

<P><STRONG><a name="[17a]"></a>rt_schedule</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, scheduler.o(i.rt_schedule))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_interrupt
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_scheduler_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_exit_critical
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1bd]"></a>rt_schedule_insert_thread</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_insert_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_insert_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[1be]"></a>rt_schedule_remove_thread</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, scheduler.o(i.rt_schedule_remove_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_schedule_remove_thread &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1bf]"></a>rt_sem_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, ipc.o(i.rt_sem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_init
</UL>

<P><STRONG><a name="[193]"></a>rt_sem_release</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, ipc.o(i.rt_sem_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_sem_release &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[192]"></a>rt_sem_take</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, ipc.o(i.rt_sem_take))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[156]"></a>rt_set_errno</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, kservice.o(i.rt_set_errno))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_write
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>

<P><STRONG><a name="[1c0]"></a>rt_show_version</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, kservice.o(i.rt_show_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;version
</UL>

<P><STRONG><a name="[1c1]"></a>rt_snprintf</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, kservice.o(i.rt_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = rt_snprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
</UL>

<P><STRONG><a name="[1c2]"></a>rt_strdup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, kservice.o(i.rt_strdup))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_strdup &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
</UL>

<P><STRONG><a name="[1c3]"></a>rt_strlen</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, kservice.o(i.rt_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
</UL>

<P><STRONG><a name="[18d]"></a>rt_strncmp</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, kservice.o(i.rt_strncmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rt_strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
</UL>

<P><STRONG><a name="[1b5]"></a>rt_strncpy</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, kservice.o(i.rt_strncpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1c4]"></a>rt_system_heap_init</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, mem.o(i.rt_system_heap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = rt_system_heap_init &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c5]"></a>rt_system_scheduler_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, scheduler.o(i.rt_system_scheduler_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_scheduler_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c7]"></a>rt_system_scheduler_start</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, scheduler.o(i.rt_system_scheduler_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rt_system_scheduler_start
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ffs
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_context_switch_to
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1c9]"></a>rt_system_timer_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, timer.o(i.rt_system_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_system_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[26a]"></a>rt_system_timer_thread_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.rt_system_timer_thread_init))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1b3]"></a>rt_thread_control</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, thread.o(i.rt_thread_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>

<P><STRONG><a name="[168]"></a>rt_thread_create</STRONG> (Thumb, 80 bytes, Stack size 56 bytes, thread.o(i.rt_thread_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_init
</UL>

<P><STRONG><a name="[1ca]"></a>rt_thread_delete</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, thread.o(i.rt_thread_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_thread_delete &rArr; rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
</UL>

<P><STRONG><a name="[1cd]"></a>rt_thread_idle_excute</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, idle.o(i.rt_thread_idle_excute))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_interrupt_get_nest
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_has_defunct_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_entry
</UL>

<P><STRONG><a name="[1cf]"></a>rt_thread_idle_init</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, idle.o(i.rt_thread_idle_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = rt_thread_idle_init &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtthread_startup
</UL>

<P><STRONG><a name="[1d0]"></a>rt_thread_init</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, thread.o(i.rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = rt_thread_init &rArr; _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
</UL>

<P><STRONG><a name="[179]"></a>rt_thread_resume</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, thread.o(i.rt_thread_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[17c]"></a>rt_thread_self</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, thread.o(i.rt_thread_self))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_find
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_hard_fault_exception
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_recv
</UL>

<P><STRONG><a name="[169]"></a>rt_thread_startup</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, thread.o(i.rt_thread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>
<BR>[Called By]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_control
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_init
</UL>

<P><STRONG><a name="[17d]"></a>rt_thread_suspend</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[53]"></a>rt_thread_timeout</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, thread.o(i.rt_thread_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_timeout &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_insert_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[1d3]"></a>rt_thread_yield</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, thread.o(i.rt_thread_yield))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[10c]"></a>rt_tick_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, clock.o(i.rt_tick_get))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_timer
</UL>

<P><STRONG><a name="[ed]"></a>rt_tick_increase</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, clock.o(i.rt_tick_increase))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = rt_tick_increase &rArr; rt_thread_yield &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[1d4]"></a>rt_timer_check</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, timer.o(i.rt_timer_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_check &rArr; rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_increase
</UL>

<P><STRONG><a name="[17f]"></a>rt_timer_control</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, timer.o(i.rt_timer_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_timer_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[1cb]"></a>rt_timer_detach</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, timer.o(i.rt_timer_detach))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_detach &rArr; rt_object_detach &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_destory
</UL>

<P><STRONG><a name="[11a]"></a>rt_timer_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, timer.o(i.rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_thread_init
</UL>

<P><STRONG><a name="[d8]"></a>rt_timer_start</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, timer.o(i.rt_timer_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rt_timer_start &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>

<P><STRONG><a name="[1d2]"></a>rt_timer_stop</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer.o(i.rt_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_stop
</UL>

<P><STRONG><a name="[1a3]"></a>rt_vsnprintf</STRONG> (Thumb, 800 bytes, Stack size 88 bytes, kservice.o(i.rt_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strlen
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;skip_atoi
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
</UL>

<P><STRONG><a name="[1da]"></a>rtgui_ack</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtgui_system.o(i.rtgui_ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rtgui_ack &rArr; rt_mb_send &rArr; rt_mb_send_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[162]"></a>rtgui_app_create</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, rtgui_app.o(i.rtgui_app_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = rtgui_app_create &rArr; rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_snprintf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_create
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_get_server
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_application_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_entry
</UL>

<P><STRONG><a name="[164]"></a>rtgui_app_destroy</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, rtgui_app.o(i.rtgui_app_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rtgui_app_destroy &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_get_server
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_entry
</UL>

<P><STRONG><a name="[54]"></a>rtgui_app_event_handler</STRONG> (Thumb, 354 bytes, Stack size 40 bytes, rtgui_app.o(i.rtgui_app_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rtgui_app_event_handler &rArr; rtgui_timer_destory &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_destory
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_event_handler
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_exit
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_handle
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_application_dest_handle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_app.o(i._rtgui_app_constructor)
</UL>
<P><STRONG><a name="[151]"></a>rtgui_app_exit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, rtgui_app.o(i.rtgui_app_exit))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_event_handler
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_end_modal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
</UL>

<P><STRONG><a name="[166]"></a>rtgui_app_run</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, rtgui_app.o(i.rtgui_app_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rtgui_app_run &rArr; _rtgui_application_event_loop &rArr; rtgui_recv &rArr; rt_mq_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_application_event_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_entry
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_enter_modal
</UL>

<P><STRONG><a name="[12d]"></a>rtgui_app_self</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, rtgui_app.o(i.rtgui_app_self))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_app_self
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_destroy
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout_vertical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout_horizontal
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_event_handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_show
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_redraw
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_only_activate
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_deactivate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_close
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_motion
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_btn
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_kbd
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_move
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_enter_modal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_destructor
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_create_in_server
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_constructor
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_hide
</UL>

<P><STRONG><a name="[1e2]"></a>rtgui_app_set_main_win</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtgui_app.o(i.rtgui_app_set_main_win))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_app_set_main_win &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
</UL>

<P><STRONG><a name="[1e3]"></a>rtgui_blit</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, blit.o(i.rtgui_blit))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = rtgui_blit &rArr; Blit565to565PixelAlpha &rArr; Blit16to16SurfaceAlpha128
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_get_bpp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitRGBtoRGBSurfaceAlpha
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitRGBtoRGBPixelAlpha
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitRGB565toARGB8888
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitARGBto565PixelAlpha
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitARGB8888toARGB8888PixelAlpha
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blit565to565PixelAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[7f]"></a>rtgui_blit_line_2_2_inv</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, blit.o(i.rtgui_blit_line_2_2_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_blit_line_2_2_inv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[72]"></a>rtgui_blit_line_direct</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, blit.o(i.rtgui_blit_line_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_blit_line_direct &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>rtgui_box_layout</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, box.o(i.rtgui_box_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rtgui_box_layout &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_get_extent
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout_vertical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout_horizontal
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_layout
</UL>

<P><STRONG><a name="[fd]"></a>rtgui_color_get_bpp</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, color.o(i.rtgui_color_get_bpp))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_get_pixel
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_load
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[1f8]"></a>rtgui_container_broadcast_event</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, container.o(i.rtgui_container_broadcast_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_container_broadcast_event
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
</UL>

<P><STRONG><a name="[122]"></a>rtgui_container_destroy_children</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, container.o(i.rtgui_container_destroy_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 624 + In Cycle
<LI>Call Chain = rtgui_container_destroy_children &rArr;  rtgui_container_destroy_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_update_clip
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_get_type
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_list_remove
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_destructor
</UL>

<P><STRONG><a name="[1f3]"></a>rtgui_container_dispatch_event</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, container.o(i.rtgui_container_dispatch_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_container_dispatch_event
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
</UL>

<P><STRONG><a name="[161]"></a>rtgui_container_dispatch_mouse_event</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, container.o(i.rtgui_container_dispatch_mouse_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtgui_container_dispatch_mouse_event &rArr; rtgui_widget_focus &rArr; rtgui_widget_unfocus &rArr;  rtgui_widget_unfocus (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_focus
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_contains_point
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_win_handle_mouse_btn
</UL>

<P><STRONG><a name="[55]"></a>rtgui_container_event_handler</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, container.o(i.rtgui_container_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rtgui_container_event_handler &rArr; rtgui_container_layout &rArr; rtgui_box_layout &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onupdate_toplvl
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onshow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onhide
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_get_rect
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_layout
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_mouse_event
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_event
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_broadcast_event
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(i._rtgui_container_constructor)
</UL>
<P><STRONG><a name="[1f9]"></a>rtgui_container_layout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, container.o(i.rtgui_container_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rtgui_container_layout &rArr; rtgui_box_layout &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
</UL>

<P><STRONG><a name="[1f1]"></a>rtgui_dc_begin_drawing</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, dc.o(i.rtgui_dc_begin_drawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rtgui_dc_begin_drawing &rArr; rtgui_dc_hw_create &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_screen_unlock
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_screen_lock
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_is_flat
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_is_equal
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_is_vmode
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_create
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_create
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_wintitle_get_type
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
</UL>

<P><STRONG><a name="[203]"></a>rtgui_dc_blend_point</STRONG> (Thumb, 336 bytes, Stack size 72 bytes, dc_blend.o(i.rtgui_dc_blend_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = rtgui_dc_blend_point &rArr; _dc_blend_point_rgb888 &rArr; _dc_get_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_pixel_format
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_contains_point
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_get_pixel
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_rgb888
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_rgb565
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_bgr565
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_argb8888
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[223]"></a>rtgui_dc_buffer_get_pixel</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dc_buffer.o(i.rtgui_dc_buffer_get_pixel))
<BR><BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[1ff]"></a>rtgui_dc_client_create</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dc_client.o(i.rtgui_dc_client_create))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
</UL>

<P><STRONG><a name="[148]"></a>rtgui_dc_client_init</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, dc_client.o(i.rtgui_dc_client_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_dc_client_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_constructor
</UL>

<P><STRONG><a name="[208]"></a>rtgui_dc_draw_border</STRONG> (Thumb, 258 bytes, Stack size 32 bytes, dc.o(i.rtgui_dc_draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rtgui_dc_draw_border &rArr; rtgui_dc_draw_shaded_rect &rArr; rtgui_dc_get_gc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_inflate
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_gc
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_shaded_rect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
</UL>

<P><STRONG><a name="[20d]"></a>rtgui_dc_draw_mono_bmp</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, dc.o(i.rtgui_dc_draw_mono_bmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtgui_dc_draw_mono_bmp &rArr; rtgui_dc_draw_point
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_word
</UL>

<P><STRONG><a name="[20c]"></a>rtgui_dc_draw_rect</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dc.o(i.rtgui_dc_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_dc_draw_rect &rArr; rtgui_dc_draw_vline
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_vline
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_border
</UL>

<P><STRONG><a name="[20a]"></a>rtgui_dc_draw_shaded_rect</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, dc.o(i.rtgui_dc_draw_shaded_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtgui_dc_draw_shaded_rect &rArr; rtgui_dc_get_gc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_gc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_vline
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_border
</UL>

<P><STRONG><a name="[211]"></a>rtgui_dc_draw_text</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, dc.o(i.rtgui_dc_draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rtgui_dc_draw_text &rArr; rtgui_font_draw &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto_align
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_get_metrics
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_draw
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_default
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_gc
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
</UL>

<P><STRONG><a name="[216]"></a>rtgui_dc_draw_word</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, dc.o(i.rtgui_dc_draw_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rtgui_dc_draw_word &rArr; rtgui_dc_draw_mono_bmp &rArr; rtgui_dc_draw_point
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_mono_bmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
</UL>

<P><STRONG><a name="[1f4]"></a>rtgui_dc_end_drawing</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, dc.o(i.rtgui_dc_end_drawing))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rtgui_dc_end_drawing &rArr; rtgui_screen_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_screen_unlock
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_screen_update
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_is_vmode
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_wintitle_get_type
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
</UL>

<P><STRONG><a name="[209]"></a>rtgui_dc_get_gc</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dc.o(i.rtgui_dc_get_gc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_dc_get_gc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_shaded_rect
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_border
</UL>

<P><STRONG><a name="[206]"></a>rtgui_dc_get_pixel_format</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dc.o(i.rtgui_dc_get_pixel_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_dc_get_pixel_format &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[204]"></a>rtgui_dc_get_visible</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, dc.o(i.rtgui_dc_get_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_is_vmode
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_fill_rect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_vline
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_point
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_hline
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_color_point
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_blit_line
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdcmm_blit
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[1fe]"></a>rtgui_dc_hw_create</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dc_hw.o(i.rtgui_dc_hw_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtgui_dc_hw_create &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
</UL>

<P><STRONG><a name="[219]"></a>rtgui_filerw_close</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, filerw.o(i.rtgui_filerw_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_filerw_close &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_unload
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_load
</UL>

<P><STRONG><a name="[21a]"></a>rtgui_filerw_read</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, filerw.o(i.rtgui_filerw_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_filerw_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_load
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_check
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[21b]"></a>rtgui_filerw_seek</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, filerw.o(i.rtgui_filerw_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_filerw_seek &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_check
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[21c]"></a>rtgui_filerw_tell</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, filerw.o(i.rtgui_filerw_tell))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtgui_filerw_tell &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_load
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_check
</UL>

<P><STRONG><a name="[145]"></a>rtgui_font_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, font.o(i.rtgui_font_default))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_constructor
</UL>

<P><STRONG><a name="[215]"></a>rtgui_font_draw</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, font.o(i.rtgui_font_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtgui_font_draw &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
</UL>

<P><STRONG><a name="[212]"></a>rtgui_font_get_metrics</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, font.o(i.rtgui_font_get_metrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_font_get_metrics &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
</UL>

<P><STRONG><a name="[24c]"></a>rtgui_font_set_defaut</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, font.o(i.rtgui_font_set_defaut))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
</UL>

<P><STRONG><a name="[21d]"></a>rtgui_font_system_add_font</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, font.o(i.rtgui_font_system_add_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtgui_font_system_add_font
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_system_init
</UL>

<P><STRONG><a name="[19b]"></a>rtgui_font_system_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, font.o(i.rtgui_font_system_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_font_system_init &rArr; rtgui_font_system_add_font
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_system_add_font
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[21e]"></a>rtgui_framebuffer_get_ops</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, rtgui_driver.o(i.rtgui_framebuffer_get_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtgui_framebuffer_get_ops &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_set_device
</UL>

<P><STRONG><a name="[132]"></a>rtgui_free</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtgui_system.o(i.rtgui_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_fini
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_break
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_fini
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_unload
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_load
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_destory
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_reset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_fini
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_free_tree
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_add
</UL>

<P><STRONG><a name="[220]"></a>rtgui_get_mainwin_rect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtgui_system.o(i.rtgui_get_mainwin_rect))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_set_device
</UL>

<P><STRONG><a name="[1dd]"></a>rtgui_get_server</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, server.o(i.rtgui_get_server))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
</UL>

<P><STRONG><a name="[fc]"></a>rtgui_graphic_driver_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtgui_driver.o(i.rtgui_graphic_driver_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_create
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_pixel_format
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_vline
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_point
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_hline
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_color_point
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_blit_line
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_get_pixel
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_load
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_update
</UL>

<P><STRONG><a name="[21f]"></a>rtgui_graphic_driver_get_rect</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtgui_driver.o(i.rtgui_graphic_driver_get_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_graphic_driver_get_rect &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
</UL>

<P><STRONG><a name="[1fa]"></a>rtgui_graphic_driver_is_vmode</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtgui_driver.o(i.rtgui_graphic_driver_is_vmode))
<BR><BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
</UL>

<P><STRONG><a name="[217]"></a>rtgui_graphic_driver_screen_update</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rtgui_driver.o(i.rtgui_graphic_driver_screen_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtgui_graphic_driver_screen_update &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_update
</UL>

<P><STRONG><a name="[199]"></a>rtgui_graphic_set_device</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, rtgui_driver.o(i.rtgui_graphic_set_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtgui_graphic_set_device &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_device_control
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_set_mainwin_rect
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_get_mainwin_rect
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_pixel_device_get_ops
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_framebuffer_get_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[224]"></a>rtgui_image_hdc_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, image_hdc.o(i.rtgui_image_hdc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_image_hdc_init &rArr; rtgui_image_register_engine &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_register_engine
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_image_init
</UL>

<P><STRONG><a name="[225]"></a>rtgui_image_register_engine</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, image.o(i.rtgui_image_register_engine))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtgui_image_register_engine &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_init
</UL>

<P><STRONG><a name="[218]"></a>rtgui_malloc</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, rtgui_system.o(i.rtgui_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_hw_create
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_create
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_monitor_append
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_load
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_blit
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_add
</UL>

<P><STRONG><a name="[226]"></a>rtgui_mouse_fini</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, mouse.o(i.rtgui_mouse_fini))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_mouse_fini &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_init
</UL>

<P><STRONG><a name="[227]"></a>rtgui_mouse_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mouse.o(i.rtgui_mouse_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = rtgui_mouse_init &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_fini
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_entry
</UL>

<P><STRONG><a name="[228]"></a>rtgui_mouse_monitor_append</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mouse.o(i.rtgui_mouse_monitor_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtgui_mouse_monitor_append &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_append_monitor_rect
</UL>

<P><STRONG><a name="[229]"></a>rtgui_mouse_monitor_contains_point</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, mouse.o(i.rtgui_mouse_monitor_contains_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_mouse_monitor_contains_point
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_contains_point
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_motion
</UL>

<P><STRONG><a name="[249]"></a>rtgui_mouse_moveto</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, mouse.o(i.rtgui_mouse_moveto))
<BR><BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_motion
</UL>

<P><STRONG><a name="[246]"></a>rtgui_mouse_set_position</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mouse.o(i.rtgui_mouse_set_position))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_btn
</UL>

<P><STRONG><a name="[1dc]"></a>rtgui_object_create</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, rtgui_object.o(i.rtgui_object_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtgui_object_create &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_object_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_create
</UL>

<P><STRONG><a name="[123]"></a>rtgui_object_destroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtgui_object.o(i.rtgui_object_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_object_destroy &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_destructors_call
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_destroy
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_destructor
</UL>

<P><STRONG><a name="[1e1]"></a>rtgui_object_event_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtgui_object.o(i.rtgui_object_event_handler))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_event_handler
</UL>

<P><STRONG><a name="[11d]"></a>rtgui_object_set_event_handler</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, rtgui_object.o(i.rtgui_object_set_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_object_set_event_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_constructor
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_box_constructor
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_app_constructor
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_wintitle_constructor
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_entry
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_constructor
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_constructor
</UL>

<P><STRONG><a name="[222]"></a>rtgui_pixel_device_get_ops</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtgui_driver.o(i.rtgui_pixel_device_get_ops))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_set_device
</UL>

<P><STRONG><a name="[139]"></a>rtgui_rect_contains_point</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, region.o(i.rtgui_rect_contains_point))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_mouse_event
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_monitor_contains_point
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_wnd_from_tree
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintile_event_handler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>

<P><STRONG><a name="[20b]"></a>rtgui_rect_inflate</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, region.o(i.rtgui_rect_inflate))
<BR><BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_border
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
</UL>

<P><STRONG><a name="[1fd]"></a>rtgui_rect_is_equal</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, region.o(i.rtgui_rect_is_equal))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
</UL>

<P><STRONG><a name="[142]"></a>rtgui_rect_is_intersect</STRONG> (Thumb, 504 bytes, Stack size 0 bytes, region.o(i.rtgui_rect_is_intersect))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_redraw_tree
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
</UL>

<P><STRONG><a name="[15f]"></a>rtgui_rect_moveto</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, region.o(i.rtgui_rect_moveto))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto_align
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout_vertical
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout_horizontal
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_move
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_widget_moveto
</UL>

<P><STRONG><a name="[213]"></a>rtgui_rect_moveto_align</STRONG> (Thumb, 190 bytes, Stack size 24 bytes, region.o(i.rtgui_rect_moveto_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_rect_moveto_align
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
</UL>

<P><STRONG><a name="[121]"></a>rtgui_recv</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtgui_system.o(i.rtgui_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rtgui_recv &rArr; rt_mq_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_self
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_application_event_loop
</UL>

<P><STRONG><a name="[205]"></a>rtgui_region_contains_point</STRONG> (Thumb, 152 bytes, Stack size 20 bytes, region.o(i.rtgui_region_contains_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rtgui_region_contains_point
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_point
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_color_point
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
</UL>

<P><STRONG><a name="[230]"></a>rtgui_region_copy</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, region.o(i.rtgui_region_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtgui_region_copy &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_break
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_update_clip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect
</UL>

<P><STRONG><a name="[257]"></a>rtgui_region_extents</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, region.o(i.rtgui_region_extents))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
</UL>

<P><STRONG><a name="[14b]"></a>rtgui_region_fini</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, region.o(i.rtgui_region_fini))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_region_fini &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_destructor
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_destructor
</UL>

<P><STRONG><a name="[147]"></a>rtgui_region_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, region.o(i.rtgui_region_init))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_constructor
</UL>

<P><STRONG><a name="[258]"></a>rtgui_region_init_rect</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, region.o(i.rtgui_region_init_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtgui_region_init_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
</UL>

<P><STRONG><a name="[146]"></a>rtgui_region_init_with_extents</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, region.o(i.rtgui_region_init_with_extents))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_reset
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_move_to_logic
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_widget_moveto
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_constructor
</UL>

<P><STRONG><a name="[12a]"></a>rtgui_region_intersect</STRONG> (Thumb, 436 bytes, Stack size 32 bytes, region.o(i.rtgui_region_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rtgui_region_intersect &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_set_extents
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect_rect
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_clip_to_region
</UL>

<P><STRONG><a name="[232]"></a>rtgui_region_intersect_rect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, region.o(i.rtgui_region_intersect_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rtgui_region_intersect_rect &rArr; rtgui_region_intersect &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_update_clip
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_move_to_logic
</UL>

<P><STRONG><a name="[1fc]"></a>rtgui_region_is_flat</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, region.o(i.rtgui_region_is_flat))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_blit_line
</UL>

<P><STRONG><a name="[261]"></a>rtgui_region_not_empty</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, region.o(i.rtgui_region_not_empty))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
</UL>

<P><STRONG><a name="[207]"></a>rtgui_region_num_rects</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, region.o(i.rtgui_region_num_rects))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_vline
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_hline
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_blit_line
</UL>

<P><STRONG><a name="[129]"></a>rtgui_region_reset</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, region.o(i.rtgui_region_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtgui_region_reset &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_with_extents
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_clip_to_region
</UL>

<P><STRONG><a name="[233]"></a>rtgui_region_subtract</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, region.o(i.rtgui_region_subtract))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_set_extents
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_break
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract_rect
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_clip_parent
</UL>

<P><STRONG><a name="[234]"></a>rtgui_region_subtract_rect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, region.o(i.rtgui_region_subtract_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_update_clip
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
</UL>

<P><STRONG><a name="[235]"></a>rtgui_region_union</STRONG> (Thumb, 380 bytes, Stack size 32 bytes, region.o(i.rtgui_region_union))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = rtgui_region_union &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_break
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union_rect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_move_to_logic
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_clip_return
</UL>

<P><STRONG><a name="[144]"></a>rtgui_region_union_rect</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, region.o(i.rtgui_region_union_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rtgui_region_union_rect &rArr; rtgui_region_union &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_union_region_tree
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
</UL>

<P><STRONG><a name="[1fb]"></a>rtgui_screen_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rtgui_system.o(i.rtgui_screen_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtgui_screen_lock &rArr; rt_mutex_take &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
</UL>

<P><STRONG><a name="[200]"></a>rtgui_screen_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rtgui_system.o(i.rtgui_screen_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtgui_screen_unlock &rArr; rt_mutex_release &rArr; rt_thread_control &rArr; rt_thread_startup &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
</UL>

<P><STRONG><a name="[12e]"></a>rtgui_send</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtgui_system.o(i.rtgui_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = rtgui_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_redraw_tree
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_only_activate
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_draw_tree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_deactivate
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_motion
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_btn
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_kbd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[1de]"></a>rtgui_send_sync</STRONG> (Thumb, 144 bytes, Stack size 80 bytes, rtgui_system.o(i.rtgui_send_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
</UL>

<P><STRONG><a name="[239]"></a>rtgui_server_handle_kbd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, server.o(i.rtgui_server_handle_kbd))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_server_handle_kbd &rArr; rtgui_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[243]"></a>rtgui_server_handle_monitor_add</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, server.o(i.rtgui_server_handle_monitor_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rtgui_server_handle_monitor_add &rArr; rtgui_topwin_append_monitor_rect &rArr; rtgui_mouse_monitor_append &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_append_monitor_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[237]"></a>rtgui_server_handle_mouse_btn</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, server.o(i.rtgui_server_handle_mouse_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rtgui_server_handle_mouse_btn &rArr; rtgui_topwin_activate_topwin &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_set_position
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_wnd_no_modaled
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_focus
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[236]"></a>rtgui_server_handle_mouse_motion</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, server.o(i.rtgui_server_handle_mouse_motion))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_server_handle_mouse_motion &rArr; rtgui_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_moveto
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_monitor_contains_point
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_wnd_no_modaled
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[238]"></a>rtgui_server_handle_touch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, server.o(i.rtgui_server_handle_touch))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[242]"></a>rtgui_server_handle_update</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, server.o(i.rtgui_server_handle_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtgui_server_handle_update &rArr; rtgui_graphic_driver_screen_update &rArr; rt_device_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_screen_update
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[24a]"></a>rtgui_server_init</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, server.o(i.rtgui_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rtgui_server_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_startup
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
</UL>

<P><STRONG><a name="[202]"></a>rtgui_server_post_event</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, server.o(i.rtgui_server_post_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_server_post_event &rArr; rtgui_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
</UL>

<P><STRONG><a name="[14d]"></a>rtgui_server_post_event_sync</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, server.o(i.rtgui_server_post_event_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_move
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_enter_modal
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_destructor
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_create_in_server
</UL>

<P><STRONG><a name="[221]"></a>rtgui_set_mainwin_rect</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rtgui_system.o(i.rtgui_set_mainwin_rect))
<BR><BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_set_device
</UL>

<P><STRONG><a name="[24b]"></a>rtgui_system_image_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, image.o(i.rtgui_system_image_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_system_image_init &rArr; rtgui_image_hdc_init &rArr; rtgui_image_register_engine &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_image_hdc_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
</UL>

<P><STRONG><a name="[19a]"></a>rtgui_system_server_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtgui_system.o(i.rtgui_system_server_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rtgui_system_server_init &rArr; rtgui_server_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_system_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_rect
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_image_init
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_set_defaut
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_init_thread_entry
</UL>

<P><STRONG><a name="[24e]"></a>rtgui_theme_draw_win</STRONG> (Thumb, 742 bytes, Stack size 56 bytes, window.o(i.rtgui_theme_draw_win))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rtgui_theme_draw_win &rArr; rtgui_dc_begin_drawing &rArr; rtgui_dc_hw_create &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto_align
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_inflate
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_word
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_text
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_border
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_get_rect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_fill_rect
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_vline
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintile_event_handler
</UL>

<P><STRONG><a name="[1e0]"></a>rtgui_timer_destory</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, rtgui_system.o(i.rtgui_timer_destory))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_timer_destory &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_event_handler
</UL>

<P><STRONG><a name="[252]"></a>rtgui_timer_stop</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, rtgui_system.o(i.rtgui_timer_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_timer_stop &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_timer_destory
</UL>

<P><STRONG><a name="[23f]"></a>rtgui_topwin_activate</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, topwin.o(i.rtgui_topwin_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rtgui_topwin_activate &rArr; rtgui_topwin_activate_topwin &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[248]"></a>rtgui_topwin_activate_topwin</STRONG> (Thumb, 202 bytes, Stack size 48 bytes, topwin.o(i.rtgui_topwin_activate_topwin))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = rtgui_topwin_activate_topwin &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_tree_from_root
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_only_activate
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_root_win
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_draw_tree
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_deactivate
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_show
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_btn
</UL>

<P><STRONG><a name="[23a]"></a>rtgui_topwin_add</STRONG> (Thumb, 198 bytes, Stack size 16 bytes, topwin.o(i.rtgui_topwin_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = rtgui_topwin_add &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[245]"></a>rtgui_topwin_append_monitor_rect</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, topwin.o(i.rtgui_topwin_append_monitor_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rtgui_topwin_append_monitor_rect &rArr; rtgui_mouse_monitor_append &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_monitor_append
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_monitor_add
</UL>

<P><STRONG><a name="[244]"></a>rtgui_topwin_get_focus</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, topwin.o(i.rtgui_topwin_get_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_topwin_get_focus &rArr; _rtgui_topwin_get_focus_from_list &rArr;  _rtgui_topwin_get_focus_from_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_focus_from_list
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_btn
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_kbd
</UL>

<P><STRONG><a name="[125]"></a>rtgui_topwin_get_topmost_window_shown</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, topwin.o(i.rtgui_topwin_get_topmost_window_shown))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_topwin_get_topmost_window_shown &rArr; _rtgui_topwin_get_topmost_child_shown &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_in_layer
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_topmost_child_shown
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_activate_next
</UL>

<P><STRONG><a name="[247]"></a>rtgui_topwin_get_wnd_no_modaled</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, topwin.o(i.rtgui_topwin_get_wnd_no_modaled))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtgui_topwin_get_wnd_no_modaled &rArr; _rtgui_topwin_get_wnd_from_tree &rArr;  _rtgui_topwin_get_wnd_from_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_wnd_from_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_motion
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_btn
</UL>

<P><STRONG><a name="[23c]"></a>rtgui_topwin_hide</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, topwin.o(i.rtgui_topwin_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = rtgui_topwin_hide &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_redraw
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_preorder_map
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_clear_modal_tree
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_activate_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[24d]"></a>rtgui_topwin_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, topwin.o(i.rtgui_topwin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtgui_topwin_init &rArr; rt_sem_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_system_server_init
</UL>

<P><STRONG><a name="[23e]"></a>rtgui_topwin_modal_enter</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, topwin.o(i.rtgui_topwin_modal_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_topwin_modal_enter &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[23d]"></a>rtgui_topwin_move</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, topwin.o(i.rtgui_topwin_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rtgui_topwin_move &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_is_intersect
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_redraw
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[240]"></a>rtgui_topwin_remove</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, topwin.o(i.rtgui_topwin_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = rtgui_topwin_remove &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_fini
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_extents
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_redraw
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_union_region_tree
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_free_tree
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_activate_next
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_focus
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[241]"></a>rtgui_topwin_resize</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, topwin.o(i.rtgui_topwin_resize))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = rtgui_topwin_resize &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union_rect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_with_extents
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_fini
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_extents
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_redraw
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[23b]"></a>rtgui_topwin_show</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, topwin.o(i.rtgui_topwin_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rtgui_topwin_show &rArr; rtgui_topwin_activate_topwin &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_preorder_map
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_could_show
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_event_handler
</UL>

<P><STRONG><a name="[22b]"></a>rtgui_type_destructors_call</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtgui_object.o(i.rtgui_type_destructors_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rtgui_type_destructors_call &rArr;  rtgui_type_destructors_call (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_destructors_call
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_destructors_call
</UL>

<P><STRONG><a name="[14a]"></a>rtgui_type_inherits_from</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rtgui_object.o(i.rtgui_type_inherits_from))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_unfocus
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_widget_moveto
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_widget_destructor
</UL>

<P><STRONG><a name="[22a]"></a>rtgui_type_object_construct</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, rtgui_object.o(i.rtgui_type_object_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = rtgui_type_object_construct &rArr;  rtgui_type_object_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_object_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_create
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_object_construct
</UL>

<P><STRONG><a name="[259]"></a>rtgui_widget_clip_parent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_clip_parent))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = rtgui_widget_clip_parent &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onshow
</UL>

<P><STRONG><a name="[25a]"></a>rtgui_widget_clip_return</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_clip_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = rtgui_widget_clip_return &rArr; rtgui_region_union &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onhide
</UL>

<P><STRONG><a name="[25b]"></a>rtgui_widget_create</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rtgui_widget_create &rArr; rtgui_object_create &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_create
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_create
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintitle_create
</UL>

<P><STRONG><a name="[153]"></a>rtgui_widget_destroy</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, widget.o(i.rtgui_widget_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtgui_widget_destroy &rArr; rtgui_object_destroy &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_destroy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_create
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_destructor
</UL>

<P><STRONG><a name="[56]"></a>rtgui_widget_event_handler</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = rtgui_widget_event_handler &rArr; rtgui_widget_onshow &rArr; rtgui_widget_clip_parent &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onupdate_toplvl
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onshow
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onhide
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_event_handler
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onpaint
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintile_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(i._rtgui_widget_constructor)
</UL>
<P><STRONG><a name="[1f0]"></a>rtgui_widget_focus</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtgui_widget_focus &rArr; rtgui_widget_unfocus &rArr;  rtgui_widget_unfocus (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_unfocus
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_mouse_event
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
</UL>

<P><STRONG><a name="[1e8]"></a>rtgui_widget_get_extent</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_get_extent))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_widget_get_extent &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout
</UL>

<P><STRONG><a name="[1f2]"></a>rtgui_widget_get_rect</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_get_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_widget_get_rect &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
</UL>

<P><STRONG><a name="[25e]"></a>rtgui_widget_hide</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, widget.o(i.rtgui_widget_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_widget_hide &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_move
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
</UL>

<P><STRONG><a name="[25f]"></a>rtgui_widget_move_to_logic</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, widget.o(i.rtgui_widget_move_to_logic))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect_rect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_with_extents
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_widget_moveto
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_move
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
</UL>

<P><STRONG><a name="[1f6]"></a>rtgui_widget_onhide</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_onhide))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rtgui_widget_onhide &rArr; rtgui_widget_clip_return &rArr; rtgui_region_union &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_clip_return
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
</UL>

<P><STRONG><a name="[25c]"></a>rtgui_widget_onpaint</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_onpaint))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_widget_onpaint
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
</UL>

<P><STRONG><a name="[1f5]"></a>rtgui_widget_onshow</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_onshow))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = rtgui_widget_onshow &rArr; rtgui_widget_clip_parent &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_clip_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
</UL>

<P><STRONG><a name="[1f7]"></a>rtgui_widget_onupdate_toplvl</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, widget.o(i.rtgui_widget_onupdate_toplvl))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_widget_onupdate_toplvl &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
</UL>

<P><STRONG><a name="[260]"></a>rtgui_widget_set_rect</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, widget.o(i.rtgui_widget_set_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = rtgui_widget_set_rect &rArr; rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_update_clip
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_layout
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_get_type
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_not_empty
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_with_extents
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_fini
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_move_to_logic
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
</UL>

<P><STRONG><a name="[13a]"></a>rtgui_widget_show</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, widget.o(i.rtgui_widget_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_widget_show &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_mark_shown
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_move
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
</UL>

<P><STRONG><a name="[25d]"></a>rtgui_widget_unfocus</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, widget.o(i.rtgui_widget_unfocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = rtgui_widget_unfocus &rArr;  rtgui_widget_unfocus (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_unfocus
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_unfocus
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_focus
</UL>

<P><STRONG><a name="[262]"></a>rtgui_widget_update</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, widget.o(i.rtgui_widget_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtgui_widget_update &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>

<P><STRONG><a name="[1eb]"></a>rtgui_widget_update_clip</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, widget.o(i.rtgui_widget_update_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 576 + In Cycle
<LI>Call Chain = rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_get_type
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract_rect
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_reset
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_update_clip
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_move_to_logic
</UL>

<P><STRONG><a name="[263]"></a>rtgui_win_close</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, window.o(i.rtgui_win_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = rtgui_win_close &rArr; _rtgui_win_deal_close &rArr; rtgui_win_hide &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintile_event_handler
</UL>

<P><STRONG><a name="[163]"></a>rtgui_win_create</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, window.o(i.rtgui_win_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = rtgui_win_create &rArr; rtgui_win_init &rArr; rtgui_widget_set_rect &rArr; rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_destroy
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_create
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[152]"></a>rtgui_win_destroy</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, window.o(i.rtgui_win_destroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + In Cycle
<LI>Call Chain = rtgui_win_destroy &rArr;  _rtgui_win_deal_close (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_destroy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_end_modal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
</UL>

<P><STRONG><a name="[58]"></a>rtgui_win_do_show</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, window.o(i.rtgui_win_do_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = rtgui_win_do_show &rArr; rtgui_win_enter_modal &rArr; rtgui_win_hide &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_focus
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_set_main_win
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_show
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_enter_modal
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_create_in_server
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_hide
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_show
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(i._rtgui_win_constructor)
</UL>
<P><STRONG><a name="[150]"></a>rtgui_win_end_modal</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, window.o(i.rtgui_win_end_modal))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_win_end_modal
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_destroy
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
</UL>

<P><STRONG><a name="[266]"></a>rtgui_win_enter_modal</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, window.o(i.rtgui_win_enter_modal))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = rtgui_win_enter_modal &rArr; rtgui_win_hide &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_run
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
</UL>

<P><STRONG><a name="[57]"></a>rtgui_win_event_handler</STRONG> (Thumb, 470 bytes, Stack size 24 bytes, window.o(i.rtgui_win_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = rtgui_win_event_handler &rArr; rtgui_win_move &rArr; rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_update_clip
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_contains_point
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_event_handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_mouse_event
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_event
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_move
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_win_handle_mouse_btn
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(i._rtgui_win_constructor)
</UL>
<P><STRONG><a name="[14f]"></a>rtgui_win_hide</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, window.o(i.rtgui_win_hide))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = rtgui_win_hide &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_hide
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_enter_modal
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_deal_close
</UL>

<P><STRONG><a name="[265]"></a>rtgui_win_init</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, window.o(i.rtgui_win_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = rtgui_win_init &rArr; rtgui_widget_set_rect &rArr; rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_strdup
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_inflate
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract_rect
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_with_extents
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_show
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_wintitle_create
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_win_create_in_server
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_create
</UL>

<P><STRONG><a name="[267]"></a>rtgui_win_move</STRONG> (Thumb, 190 bytes, Stack size 48 bytes, window.o(i.rtgui_win_move))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = rtgui_win_move &rArr; rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_show
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_move_to_logic
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_hide
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>

<P><STRONG><a name="[165]"></a>rtgui_win_show</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, window.o(i.rtgui_win_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = rtgui_win_show &rArr; rtgui_win_do_show &rArr; rtgui_win_enter_modal &rArr; rtgui_win_hide &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_entry
</UL>

<P><STRONG><a name="[1ef]"></a>rtgui_win_update_clip</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, window.o(i.rtgui_win_update_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = rtgui_win_update_clip &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_update_clip
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract_rect
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect_rect
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_set_rect
</UL>

<P><STRONG><a name="[59]"></a>rtgui_wintile_event_handler</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, title.o(i.rtgui_wintile_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rtgui_wintile_event_handler &rArr; rtgui_widget_event_handler &rArr; rtgui_widget_onshow &rArr; rtgui_widget_clip_parent &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_event_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_contains_point
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_close
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
</UL>
<BR>[Address Reference Count : 1]<UL><LI> title.o(i._rtgui_wintitle_constructor)
</UL>
<P><STRONG><a name="[269]"></a>rtgui_wintitle_create</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, title.o(i.rtgui_wintitle_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = rtgui_wintitle_create &rArr; rtgui_widget_create &rArr; rtgui_object_create &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_wintitle_get_type
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_create
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
</UL>

<P><STRONG><a name="[174]"></a>rtthread_startup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, startup.o(i.rtthread_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rtthread_startup &rArr; rt_application_init &rArr; rt_thread_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_init
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_thread_init
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_start
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_heap_init
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_board_init
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_application_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>version</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, cmd.o(i.version))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = version &rArr; rt_show_version &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_show_version
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmd.o(FSymTab)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[5a]"></a>application_entry</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, demo_application.o(i.application_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = application_entry &rArr; rtgui_win_create &rArr; rtgui_win_init &rArr; rtgui_widget_set_rect &rArr; rtgui_widget_move_to_logic &rArr; rtgui_widget_update_clip &rArr;  rtgui_widget_update_clip (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_show
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_destroy
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_create
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_run
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> demo_application.o(i.application_init)
</UL>
<P><STRONG><a name="[de]"></a>GPIO_Configuration</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, usart.o(i.GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = GPIO_Configuration &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[e6]"></a>NVIC_Configuration</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usart.o(i.NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = NVIC_Configuration &rArr; NVIC_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[e9]"></a>RCC_Configuration</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usart.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = RCC_Configuration &rArr; RCC_APB1PeriphClockCmd &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_usart_init
</UL>

<P><STRONG><a name="[6e]"></a>stm32_configure</STRONG> (Thumb, 190 bytes, Stack size 32 bytes, usart.o(i.stm32_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = stm32_configure &rArr; USART_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[6f]"></a>stm32_control</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, usart.o(i.stm32_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = stm32_control &rArr; USART_ITConfig &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[71]"></a>stm32_getc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(i.stm32_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_getc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[70]"></a>stm32_putc</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usart.o(i.stm32_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = stm32_putc &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usart.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>BGR2RGB</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, ili_lcd_general.o(i.BGR2RGB))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BGR2RGB
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_get_pixel
</UL>

<P><STRONG><a name="[e0]"></a>LCD_FSMCConfig</STRONG> (Thumb, 198 bytes, Stack size 128 bytes, ili_lcd_general.o(i.LCD_FSMCConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = LCD_FSMCConfig &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMStructInit
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAMCmd
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_port_init
</UL>

<P><STRONG><a name="[16e]"></a>delay</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, ili_lcd_general.o(i.delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Initializtion
</UL>

<P><STRONG><a name="[170]"></a>lcd_SetCursor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ili_lcd_general.o(i.lcd_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_set_pixel
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_vline
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_hline
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_blit_line
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_gram
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[16f]"></a>lcd_clear</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ili_lcd_general.o(i.lcd_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_clear &rArr; lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Initializtion
</UL>

<P><STRONG><a name="[5e]"></a>lcd_close</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili_lcd_general.o(i.lcd_close))
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(i.rt_hw_lcd_init)
</UL>
<P><STRONG><a name="[5f]"></a>lcd_control</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, ili_lcd_general.o(i.lcd_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(i.rt_hw_lcd_init)
</UL>
<P><STRONG><a name="[5c]"></a>lcd_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili_lcd_general.o(i.lcd_init))
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(i.rt_hw_lcd_init)
</UL>
<P><STRONG><a name="[5d]"></a>lcd_open</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ili_lcd_general.o(i.lcd_open))
<BR>[Address Reference Count : 1]<UL><LI> ili_lcd_general.o(i.rt_hw_lcd_init)
</UL>
<P><STRONG><a name="[16b]"></a>lcd_port_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, ili_lcd_general.o(i.lcd_port_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = lcd_port_init &rArr; LCD_FSMCConfig &rArr; GPIO_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_FSMCConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Initializtion
</UL>

<P><STRONG><a name="[172]"></a>lcd_read_gram</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, ili_lcd_general.o(i.lcd_read_gram))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lcd_read_gram &rArr; lcd_SetCursor &rArr; write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_get_pixel
</UL>

<P><STRONG><a name="[16c]"></a>write_cmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili_lcd_general.o(i.write_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_set_pixel
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_vline
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_hline
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_blit_line
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Initializtion
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_read_gram
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[171]"></a>write_data</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ili_lcd_general.o(i.write_data))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_set_pixel
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_vline
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_hline
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_blit_line
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_reg
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_clear
</UL>

<P><STRONG><a name="[16d]"></a>write_reg</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, ili_lcd_general.o(i.write_reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = write_reg
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_data
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_vline
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_hline
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_lcd_draw_blit_line
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_Initializtion
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_SetCursor
</UL>

<P><STRONG><a name="[d7]"></a>EXTI_Enable</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, touch.o(i.EXTI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = EXTI_Enable &rArr; EXTI_Init &rArr; assert_failed &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[ea]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[eb]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[1ce]"></a>_has_defunct_thread</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, idle.o(i._has_defunct_thread))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>

<P><STRONG><a name="[66]"></a>rt_thread_idle_entry</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, idle.o(i.rt_thread_idle_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = rt_thread_idle_entry &rArr; rt_thread_idle_excute &rArr; rt_object_delete &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_idle_excute
</UL>
<BR>[Address Reference Count : 1]<UL><LI> idle.o(i.rt_thread_idle_init)
</UL>
<P><STRONG><a name="[19c]"></a>rt_ipc_list_resume</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_resume &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[19d]"></a>rt_ipc_list_resume_all</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, ipc.o(i.rt_ipc_list_resume_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rt_ipc_list_resume_all &rArr; rt_thread_resume &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_delete
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_detach
</UL>

<P><STRONG><a name="[19f]"></a>rt_ipc_list_suspend</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, ipc.o(i.rt_ipc_list_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_ipc_list_suspend &rArr; rt_thread_suspend &rArr; rt_timer_stop &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_suspend
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_take
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_take
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_recv
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
</UL>

<P><STRONG><a name="[1a1]"></a>rt_ipc_object_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ipc.o(i.rt_ipc_object_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rt_ipc_object_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_init
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_init
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_create
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
</UL>

<P><STRONG><a name="[1a2]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ipc.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_init
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_object_init
</UL>

<P><STRONG><a name="[1a0]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ipc.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_suspend
</UL>

<P><STRONG><a name="[19e]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ipc.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_sem_release
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mutex_release
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mq_send
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_send_wait
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_mb_recv
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_ipc_list_resume_all
</UL>

<P><STRONG><a name="[1d9]"></a>print_number</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, kservice.o(i.print_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = print_number
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[1d8]"></a>skip_atoi</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, kservice.o(i.skip_atoi))
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_vsnprintf
</UL>

<P><STRONG><a name="[175]"></a>plug_holes</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, mem.o(i.plug_holes))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = plug_holes &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>

<P><STRONG><a name="[1b6]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, object.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_allocate
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_init
</UL>

<P><STRONG><a name="[1b7]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, object.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_delete
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
</UL>

<P><STRONG><a name="[114]"></a>_rt_scheduler_stack_check</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, scheduler.o(i._rt_scheduler_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
</UL>

<P><STRONG><a name="[1c6]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, scheduler.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_scheduler_init
</UL>

<P><STRONG><a name="[117]"></a>_rt_thread_init</STRONG> (Thumb, 138 bytes, Stack size 48 bytes, thread.o(i._rt_thread_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _rt_thread_init &rArr; rt_timer_init &rArr; rt_object_init &rArr; rt_strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_create
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_init
</UL>

<P><STRONG><a name="[1cc]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, thread.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_delete
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_exit
</UL>

<P><STRONG><a name="[1d1]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, thread.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_yield
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_resume
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_thread_timeout
</UL>

<P><STRONG><a name="[52]"></a>rt_thread_exit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, thread.o(i.rt_thread_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = rt_thread_exit &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_is_systemobject
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_object_detach
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_schedule_remove_thread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(i._rt_thread_init)
</UL>
<P><STRONG><a name="[11b]"></a>_rt_timer_init</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, timer.o(i._rt_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rt_timer_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_init
</UL>

<P><STRONG><a name="[1d5]"></a>_rt_timer_remove</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i._rt_timer_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rt_timer_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_stop
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_detach
</UL>

<P><STRONG><a name="[11c]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, timer.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_system_timer_init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rt_timer_init
</UL>

<P><STRONG><a name="[1d7]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, timer.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_start
</UL>

<P><STRONG><a name="[1d6]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_timer_check
</UL>

<P><STRONG><a name="[154]"></a>_serial_dma_rx</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, serial.o(i._serial_dma_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_dma_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[157]"></a>_serial_dma_tx</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, serial.o(i._serial_dma_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_set_errno
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[159]"></a>_serial_int_rx</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, serial.o(i._serial_int_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_disable
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_hw_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[15a]"></a>_serial_int_tx</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, serial.o(i._serial_int_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _serial_int_tx &rArr; rt_completion_wait &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[15c]"></a>_serial_poll_rx</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, serial.o(i._serial_poll_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_read
</UL>

<P><STRONG><a name="[15d]"></a>_serial_poll_tx</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, serial.o(i._serial_poll_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _serial_poll_tx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_serial_write
</UL>

<P><STRONG><a name="[62]"></a>rt_serial_close</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, serial.o(i.rt_serial_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rt_serial_close &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[65]"></a>rt_serial_control</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, serial.o(i.rt_serial_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rt_serial_control &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[60]"></a>rt_serial_init</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, serial.o(i.rt_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rt_serial_init &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[61]"></a>rt_serial_open</STRONG> (Thumb, 380 bytes, Stack size 24 bytes, serial.o(i.rt_serial_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_serial_open &rArr; rt_data_queue_init &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_malloc
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[63]"></a>rt_serial_read</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rt_serial_read &rArr; _serial_int_rx &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_rx
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_rx
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[64]"></a>rt_serial_write</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, serial.o(i.rt_serial_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = rt_serial_write &rArr; _serial_dma_tx &rArr; rt_data_queue_push &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_poll_tx
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_int_tx
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_dma_tx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> serial.o(i.rt_hw_serial_register)
</UL>
<P><STRONG><a name="[178]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, completion.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_wait
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_completion_done
</UL>

<P><STRONG><a name="[185]"></a>rt_list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_init
</UL>

<P><STRONG><a name="[189]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[18a]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dataqueue.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_push
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_data_queue_pop
</UL>

<P><STRONG><a name="[fe]"></a>_list_device</STRONG> (Thumb, 82 bytes, Stack size 104 bytes, cmd.o(i._list_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = _list_device &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_device
</UL>

<P><STRONG><a name="[101]"></a>_list_event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, cmd.o(i._list_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_event &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_event
</UL>

<P><STRONG><a name="[105]"></a>_list_mailbox</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, cmd.o(i._list_mailbox))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_mailbox &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mailbox
</UL>

<P><STRONG><a name="[106]"></a>_list_mempool</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, cmd.o(i._list_mempool))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _list_mempool &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mempool
</UL>

<P><STRONG><a name="[107]"></a>_list_msgqueue</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmd.o(i._list_msgqueue))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_msgqueue &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_msgqueue
</UL>

<P><STRONG><a name="[108]"></a>_list_mutex</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, cmd.o(i._list_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_mutex &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_mutex
</UL>

<P><STRONG><a name="[109]"></a>_list_sem</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, cmd.o(i._list_sem))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _list_sem &rArr; show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_wait_queue
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_len
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_sem
</UL>

<P><STRONG><a name="[10a]"></a>_list_thread</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, cmd.o(i._list_thread))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _list_thread &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_thread
</UL>

<P><STRONG><a name="[10b]"></a>_list_timer</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cmd.o(i._list_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _list_timer &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_timer
</UL>

<P><STRONG><a name="[102]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cmd.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[103]"></a>rt_list_len</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cmd.o(i.rt_list_len))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mutex
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[104]"></a>show_wait_queue</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, cmd.o(i.show_wait_queue))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = show_wait_queue &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_sem
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_msgqueue
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mempool
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_mailbox
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_list_event
</UL>

<P><STRONG><a name="[d1]"></a>Blit16to16SurfaceAlpha128</STRONG> (Thumb, 412 bytes, Stack size 44 bytes, blit.o(i.Blit16to16SurfaceAlpha128))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Blit16to16SurfaceAlpha128
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blit565to565PixelAlpha
</UL>

<P><STRONG><a name="[d0]"></a>Blit565to565PixelAlpha</STRONG> (Thumb, 634 bytes, Stack size 40 bytes, blit.o(i.Blit565to565PixelAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = Blit565to565PixelAlpha &rArr; Blit16to16SurfaceAlpha128
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blit16to16SurfaceAlpha128
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
</UL>

<P><STRONG><a name="[1e6]"></a>BlitARGB8888toARGB8888PixelAlpha</STRONG> (Thumb, 234 bytes, Stack size 44 bytes, blit.o(i.BlitARGB8888toARGB8888PixelAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BlitARGB8888toARGB8888PixelAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
</UL>

<P><STRONG><a name="[1e4]"></a>BlitARGBto565PixelAlpha</STRONG> (Thumb, 574 bytes, Stack size 36 bytes, blit.o(i.BlitARGBto565PixelAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BlitARGBto565PixelAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
</UL>

<P><STRONG><a name="[d4]"></a>BlitRGB565to32</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, blit.o(i.BlitRGB565to32))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BlitRGB565to32
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitRGB565toARGB8888
</UL>

<P><STRONG><a name="[d3]"></a>BlitRGB565toARGB8888</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, blit.o(i.BlitRGB565toARGB8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BlitRGB565toARGB8888 &rArr; BlitRGB565to32
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitRGB565to32
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
</UL>

<P><STRONG><a name="[1e5]"></a>BlitRGBtoRGBPixelAlpha</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, blit.o(i.BlitRGBtoRGBPixelAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BlitRGBtoRGBPixelAlpha
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
</UL>

<P><STRONG><a name="[d5]"></a>BlitRGBtoRGBSurfaceAlpha</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, blit.o(i.BlitRGBtoRGBSurfaceAlpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BlitRGBtoRGBSurfaceAlpha &rArr; BlitRGBtoRGBSurfaceAlpha128
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitRGBtoRGBSurfaceAlpha128
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
</UL>

<P><STRONG><a name="[d6]"></a>BlitRGBtoRGBSurfaceAlpha128</STRONG> (Thumb, 284 bytes, Stack size 36 bytes, blit.o(i.BlitRGBtoRGBSurfaceAlpha128))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = BlitRGBtoRGBSurfaceAlpha128
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlitRGBtoRGBSurfaceAlpha
</UL>

<P><STRONG><a name="[76]"></a>rtgui_blit_line_1_2</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blit.o(i.rtgui_blit_line_1_2))
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[79]"></a>rtgui_blit_line_1_3</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blit.o(i.rtgui_blit_line_1_3))
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[7c]"></a>rtgui_blit_line_1_4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blit.o(i.rtgui_blit_line_1_4))
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[73]"></a>rtgui_blit_line_2_1</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blit.o(i.rtgui_blit_line_2_1))
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[7a]"></a>rtgui_blit_line_2_3</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, blit.o(i.rtgui_blit_line_2_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rtgui_blit_line_2_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[7d]"></a>rtgui_blit_line_2_4</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, blit.o(i.rtgui_blit_line_2_4))
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[74]"></a>rtgui_blit_line_3_1</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, blit.o(i.rtgui_blit_line_3_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtgui_blit_line_3_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[77]"></a>rtgui_blit_line_3_2</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, blit.o(i.rtgui_blit_line_3_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_blit_line_3_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[80]"></a>rtgui_blit_line_3_2_inv</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, blit.o(i.rtgui_blit_line_3_2_inv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_blit_line_3_2_inv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[7e]"></a>rtgui_blit_line_3_4</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, blit.o(i.rtgui_blit_line_3_4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtgui_blit_line_3_4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[75]"></a>rtgui_blit_line_4_1</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, blit.o(i.rtgui_blit_line_4_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rtgui_blit_line_4_1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[78]"></a>rtgui_blit_line_4_2</STRONG> (Thumb, 554 bytes, Stack size 32 bytes, blit.o(i.rtgui_blit_line_4_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = rtgui_blit_line_4_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[7b]"></a>rtgui_blit_line_4_3</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, blit.o(i.rtgui_blit_line_4_3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtgui_blit_line_4_3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> blit.o(.constdata)
</UL>
<P><STRONG><a name="[81]"></a>_rtgui_box_constructor</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, box.o(i._rtgui_box_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rtgui_box_constructor &rArr; rtgui_object_set_event_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> box.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>rtgui_box_layout_horizontal</STRONG> (Thumb, 402 bytes, Stack size 72 bytes, box.o(i.rtgui_box_layout_horizontal))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtgui_box_layout_horizontal &rArr; rtgui_app_self
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout
</UL>

<P><STRONG><a name="[1e9]"></a>rtgui_box_layout_vertical</STRONG> (Thumb, 426 bytes, Stack size 72 bytes, box.o(i.rtgui_box_layout_vertical))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtgui_box_layout_vertical &rArr; rtgui_app_self
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_box_layout
</UL>

<P><STRONG><a name="[82]"></a>_rtgui_container_constructor</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, container.o(i._rtgui_container_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rtgui_container_constructor &rArr; rtgui_object_set_event_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata)
</UL>
<P><STRONG><a name="[83]"></a>_rtgui_container_destructor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, container.o(i._rtgui_container_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = _rtgui_container_destructor &rArr; rtgui_container_destroy_children &rArr;  rtgui_container_destroy_children (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_destroy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> container.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>rtgui_list_remove</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, container.o(i.rtgui_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_destroy_children
</UL>

<P><STRONG><a name="[20f]"></a>rtgui_dc_draw_hline</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dc.o(i.rtgui_dc_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_dc_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_shaded_rect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_rect
</UL>

<P><STRONG><a name="[20e]"></a>rtgui_dc_draw_point</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dc.o(i.rtgui_dc_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_dc_draw_point
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_mono_bmp
</UL>

<P><STRONG><a name="[210]"></a>rtgui_dc_draw_vline</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, dc.o(i.rtgui_dc_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_dc_draw_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_shaded_rect
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_draw_rect
</UL>

<P><STRONG><a name="[f7]"></a>_dc_blend_point_argb8888</STRONG> (Thumb, 378 bytes, Stack size 56 bytes, dc_blend.o(i._dc_blend_point_argb8888))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _dc_blend_point_argb8888 &rArr; _dc_get_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_get_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
</UL>

<P><STRONG><a name="[f9]"></a>_dc_blend_point_bgr565</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, dc_blend.o(i._dc_blend_point_bgr565))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _dc_blend_point_bgr565 &rArr; _dc_get_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_get_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
</UL>

<P><STRONG><a name="[fa]"></a>_dc_blend_point_rgb565</STRONG> (Thumb, 428 bytes, Stack size 56 bytes, dc_blend.o(i._dc_blend_point_rgb565))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _dc_blend_point_rgb565 &rArr; _dc_get_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_get_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
</UL>

<P><STRONG><a name="[fb]"></a>_dc_blend_point_rgb888</STRONG> (Thumb, 298 bytes, Stack size 56 bytes, dc_blend.o(i._dc_blend_point_rgb888))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _dc_blend_point_rgb888 &rArr; _dc_get_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_get_pixel
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
</UL>

<P><STRONG><a name="[f8]"></a>_dc_get_pixel</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, dc_blend.o(i._dc_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _dc_get_pixel
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_get_bpp
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_rgb888
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_rgb565
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_bgr565
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dc_blend_point_argb8888
</UL>

<P><STRONG><a name="[8a]"></a>rtgui_dc_client_blit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dc_client.o(i.rtgui_dc_client_blit))
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[89]"></a>rtgui_dc_client_blit_line</STRONG> (Thumb, 372 bytes, Stack size 56 bytes, dc_client.o(i.rtgui_dc_client_blit_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rtgui_dc_client_blit_line &rArr; rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_is_flat
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_num_rects
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[85]"></a>rtgui_dc_client_draw_color_point</STRONG> (Thumb, 84 bytes, Stack size 48 bytes, dc_client.o(i.rtgui_dc_client_draw_color_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtgui_dc_client_draw_color_point &rArr; rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_contains_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[87]"></a>rtgui_dc_client_draw_hline</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, dc_client.o(i.rtgui_dc_client_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtgui_dc_client_draw_hline &rArr; rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_num_rects
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_fill_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[84]"></a>rtgui_dc_client_draw_point</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, dc_client.o(i.rtgui_dc_client_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtgui_dc_client_draw_point &rArr; rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_contains_point
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[86]"></a>rtgui_dc_client_draw_vline</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, dc_client.o(i.rtgui_dc_client_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtgui_dc_client_draw_vline &rArr; rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_num_rects
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[88]"></a>rtgui_dc_client_fill_rect</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, dc_client.o(i.rtgui_dc_client_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtgui_dc_client_fill_rect &rArr; rtgui_dc_client_draw_hline &rArr; rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_draw_hline
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[8b]"></a>rtgui_dc_client_fini</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dc_client.o(i.rtgui_dc_client_fini))
<BR>[Address Reference Count : 1]<UL><LI> dc_client.o(.constdata)
</UL>
<P><STRONG><a name="[92]"></a>rtgui_dc_hw_blit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dc_hw.o(i.rtgui_dc_hw_blit))
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[91]"></a>rtgui_dc_hw_blit_line</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, dc_hw.o(i.rtgui_dc_hw_blit_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtgui_dc_hw_blit_line &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[8d]"></a>rtgui_dc_hw_draw_color_point</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, dc_hw.o(i.rtgui_dc_hw_draw_color_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtgui_dc_hw_draw_color_point &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[8f]"></a>rtgui_dc_hw_draw_hline</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, dc_hw.o(i.rtgui_dc_hw_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_dc_hw_draw_hline &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[8c]"></a>rtgui_dc_hw_draw_point</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, dc_hw.o(i.rtgui_dc_hw_draw_point))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_dc_hw_draw_point &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[8e]"></a>rtgui_dc_hw_draw_vline</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, dc_hw.o(i.rtgui_dc_hw_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_dc_hw_draw_vline &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[90]"></a>rtgui_dc_hw_fill_rect</STRONG> (Thumb, 238 bytes, Stack size 40 bytes, dc_hw.o(i.rtgui_dc_hw_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rtgui_dc_hw_fill_rect &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[93]"></a>rtgui_dc_hw_fini</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dc_hw.o(i.rtgui_dc_hw_fini))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_dc_hw_fini &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dc_hw.o(.constdata)
</UL>
<P><STRONG><a name="[94]"></a>rtgui_fnt_font_draw_text</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, font_fnt.o(i.rtgui_fnt_font_draw_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rtgui_fnt_font_draw_text &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_fnt.o(.constdata)
</UL>
<P><STRONG><a name="[95]"></a>rtgui_fnt_font_get_metrics</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, font_fnt.o(i.rtgui_fnt_font_get_metrics))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rtgui_fnt_font_get_metrics &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> font_fnt.o(.constdata)
</UL>
<P><STRONG><a name="[8]"></a>rtgui_image_hdc_blit</STRONG> (Thumb, 984 bytes, Stack size 112 bytes, image_hdc.o(i.rtgui_image_hdc_blit))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rtgui_image_hdc_blit &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_get_bpp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_blit
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_pixel_format
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_seek
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_read
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_buffer_get_pixel
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_blend_point
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_rect
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_hdc.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>rtgui_image_hdc_check</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, image_hdc.o(i.rtgui_image_hdc_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtgui_image_hdc_check &rArr; rtgui_filerw_read &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_tell
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_seek
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_hdc.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>rtgui_image_hdc_load</STRONG> (Thumb, 198 bytes, Stack size 40 bytes, image_hdc.o(i.rtgui_image_hdc_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rtgui_image_hdc_load &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_get_bpp
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_tell
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_read
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_hdc.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>rtgui_image_hdc_unload</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, image_hdc.o(i.rtgui_image_hdc_unload))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = rtgui_image_hdc_unload &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_filerw_close
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_hdc.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>rtgui_image_hdcmm_blit</STRONG> (Thumb, 272 bytes, Stack size 48 bytes, image_hdc.o(i.rtgui_image_hdcmm_blit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtgui_image_hdcmm_blit &rArr; rtgui_dc_get_visible &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_get_visible
</UL>
<BR>[Address Reference Count : 1]<UL><LI> image_hdc.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>rtgui_break</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, region.o(i.rtgui_break))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = rtgui_break &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_copy
</UL>

<P><STRONG><a name="[1ed]"></a>rtgui_coalesce</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, region.o(i.rtgui_coalesce))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rtgui_coalesce &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
</UL>

<P><STRONG><a name="[22c]"></a>rtgui_op</STRONG> (Thumb, 1310 bytes, Stack size 112 bytes, region.o(i.rtgui_op))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memmove
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_appendNonO
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_coalesce
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_break
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect
</UL>

<P><STRONG><a name="[22d]"></a>rtgui_rect_alloc</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, region.o(i.rtgui_rect_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_realloc
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_malloc
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_break
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_unionO
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtractO
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersectO
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_appendNonO
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
</UL>

<P><STRONG><a name="[22e]"></a>rtgui_region_appendNonO</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, region.o(i.rtgui_region_appendNonO))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_op
</UL>

<P><STRONG><a name="[67]"></a>rtgui_region_intersectO</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, region.o(i.rtgui_region_intersectO))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rtgui_region_intersectO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> region.o(i.rtgui_region_intersect)
</UL>
<P><STRONG><a name="[68]"></a>rtgui_region_subtractO</STRONG> (Thumb, 540 bytes, Stack size 40 bytes, region.o(i.rtgui_region_subtractO))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = rtgui_region_subtractO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> region.o(i.rtgui_region_subtract)
</UL>
<P><STRONG><a name="[69]"></a>rtgui_region_unionO</STRONG> (Thumb, 842 bytes, Stack size 56 bytes, region.o(i.rtgui_region_unionO))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = rtgui_region_unionO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_alloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> region.o(i.rtgui_region_union)
</UL>
<P><STRONG><a name="[231]"></a>rtgui_set_extents</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, region.o(i.rtgui_set_extents))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtgui_set_extents &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect
</UL>

<P><STRONG><a name="[97]"></a>_rtgui_app_constructor</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtgui_app.o(i._rtgui_app_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rtgui_app_constructor &rArr; rtgui_object_set_event_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_app.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>_rtgui_app_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtgui_app.o(i._rtgui_app_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = _rtgui_app_destructor &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_app.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>_rtgui_application_dest_handle</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, rtgui_app.o(i._rtgui_application_dest_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = _rtgui_application_dest_handle &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_event_handler
</UL>

<P><STRONG><a name="[120]"></a>_rtgui_application_event_loop</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, rtgui_app.o(i._rtgui_application_event_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _rtgui_application_event_loop &rArr; rtgui_recv &rArr; rt_mq_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_recv
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_run
</UL>

<P><STRONG><a name="[1df]"></a>rtgui_object_handle</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtgui_app.o(i.rtgui_object_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_object_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_event_handler
</UL>

<P><STRONG><a name="[a4]"></a>_mono_draw_hline</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, rtgui_driver.o(i._mono_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _mono_draw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>_mono_draw_raw_hline</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, rtgui_driver.o(i._mono_draw_raw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _mono_draw_raw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>_mono_draw_vline</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, rtgui_driver.o(i._mono_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _mono_draw_vline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>_mono_get_pixel</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, rtgui_driver.o(i._mono_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _mono_get_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>_mono_set_pixel</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, rtgui_driver.o(i._mono_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _mono_set_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[ab]"></a>_pixel_draw_raw_hline</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_draw_raw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_draw_raw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>_pixel_mono_draw_hline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_mono_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_mono_draw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_mono
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>_pixel_mono_draw_vline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_mono_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_mono_draw_vline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_mono
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>_pixel_mono_get_pixel</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_mono_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _pixel_mono_get_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>_pixel_mono_set_pixel</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_mono_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _pixel_mono_set_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_mono
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>_pixel_rgb565_draw_hline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_rgb565_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_rgb565_draw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>_pixel_rgb565_draw_vline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_rgb565_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_rgb565_draw_vline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>_pixel_rgb565_get_pixel</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_rgb565_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _pixel_rgb565_get_pixel &rArr; rtgui_color_from_565
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_from_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>_pixel_rgb565_set_pixel</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_rgb565_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _pixel_rgb565_set_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>_pixel_rgb565p_draw_hline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_rgb565p_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_rgb565p_draw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>_pixel_rgb565p_draw_vline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_rgb565p_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_rgb565p_draw_vline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>_pixel_rgb565p_get_pixel</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_rgb565p_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _pixel_rgb565p_get_pixel &rArr; rtgui_color_from_565p
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_from_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>_pixel_rgb565p_set_pixel</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_rgb565p_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _pixel_rgb565p_set_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>_pixel_rgb888_draw_hline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_rgb888_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_rgb888_draw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>_pixel_rgb888_draw_vline</STRONG> (Thumb, 46 bytes, Stack size 32 bytes, rtgui_driver.o(i._pixel_rgb888_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _pixel_rgb888_draw_vline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>_pixel_rgb888_get_pixel</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_rgb888_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _pixel_rgb888_get_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>_pixel_rgb888_set_pixel</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, rtgui_driver.o(i._pixel_rgb888_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = _pixel_rgb888_set_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_888
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>_rgb565_draw_hline</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, rtgui_driver.o(i._rgb565_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _rgb565_draw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9c]"></a>_rgb565_draw_vline</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, rtgui_driver.o(i._rgb565_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _rgb565_draw_vline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>_rgb565_get_pixel</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, rtgui_driver.o(i._rgb565_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _rgb565_get_pixel &rArr; rtgui_color_from_565
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_from_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>_rgb565_set_pixel</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, rtgui_driver.o(i._rgb565_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _rgb565_set_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>_rgb565p_draw_hline</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, rtgui_driver.o(i._rgb565p_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _rgb565p_draw_hline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>_rgb565p_draw_vline</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, rtgui_driver.o(i._rgb565p_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = _rgb565p_draw_vline &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>_rgb565p_get_pixel</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, rtgui_driver.o(i._rgb565p_get_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _rgb565p_get_pixel &rArr; rtgui_color_from_565p
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_from_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>_rgb565p_set_pixel</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, rtgui_driver.o(i._rgb565p_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = _rgb565p_set_pixel &rArr; rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_color_to_565p
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>framebuffer_draw_raw_hline</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, rtgui_driver.o(i.framebuffer_draw_raw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = framebuffer_draw_raw_hline &rArr; rt_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_memcpy
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_get_device
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtgui_driver.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>rtgui_color_from_565</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, rtgui_driver.o(i.rtgui_color_from_565))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rtgui_color_from_565
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_get_pixel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_get_pixel
</UL>

<P><STRONG><a name="[112]"></a>rtgui_color_from_565p</STRONG> (Thumb, 54 bytes, Stack size 20 bytes, rtgui_driver.o(i.rtgui_color_from_565p))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rtgui_color_from_565p
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_get_pixel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_get_pixel
</UL>

<P><STRONG><a name="[10f]"></a>rtgui_color_to_565</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, rtgui_driver.o(i.rtgui_color_to_565))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_set_pixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_draw_vline
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_draw_hline
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_set_pixel
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_draw_vline
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_draw_hline
</UL>

<P><STRONG><a name="[111]"></a>rtgui_color_to_565p</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtgui_driver.o(i.rtgui_color_to_565p))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_set_pixel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_draw_vline
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_draw_hline
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_set_pixel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_draw_vline
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_draw_hline
</UL>

<P><STRONG><a name="[113]"></a>rtgui_color_to_888</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtgui_driver.o(i.rtgui_color_to_888))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb888_set_pixel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb888_draw_vline
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb888_draw_hline
</UL>

<P><STRONG><a name="[10e]"></a>rtgui_color_to_mono</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, rtgui_driver.o(i.rtgui_color_to_mono))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_mono_set_pixel
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_mono_draw_vline
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_mono_draw_hline
</UL>

<P><STRONG><a name="[10d]"></a>rtgui_graphic_get_device</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, rtgui_driver.o(i.rtgui_graphic_get_device))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = rtgui_graphic_get_device
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;framebuffer_draw_raw_hline
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_set_pixel
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_get_pixel
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_draw_vline
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565p_draw_hline
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_set_pixel
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_get_pixel
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_draw_vline
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rgb565_draw_hline
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb888_set_pixel
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb888_get_pixel
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb888_draw_vline
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb888_draw_hline
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_set_pixel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_get_pixel
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_draw_vline
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565p_draw_hline
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_set_pixel
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_get_pixel
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_draw_vline
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_rgb565_draw_hline
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_mono_set_pixel
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_mono_get_pixel
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_mono_draw_vline
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_mono_draw_hline
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_pixel_draw_raw_hline
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mono_set_pixel
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mono_get_pixel
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mono_draw_vline
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mono_draw_raw_hline
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mono_draw_hline
</UL>

<P><STRONG><a name="[b8]"></a>_rtgui_object_constructor</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtgui_object.o(i._rtgui_object_constructor))
<BR>[Address Reference Count : 1]<UL><LI> rtgui_object.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>_rtgui_object_destructor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtgui_object.o(i._rtgui_object_destructor))
<BR>[Address Reference Count : 1]<UL><LI> rtgui_object.o(.constdata)
</UL>
<P><STRONG><a name="[6b]"></a>rtgui_server_entry</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, server.o(i.rtgui_server_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rtgui_server_entry &rArr; rtgui_app_create &rArr; rt_mq_create &rArr; rt_object_allocate &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_run
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_destroy
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_create
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_mouse_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(i.rtgui_server_init)
</UL>
<P><STRONG><a name="[6a]"></a>rtgui_server_event_handler</STRONG> (Thumb, 480 bytes, Stack size 16 bytes, server.o(i.rtgui_server_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = rtgui_server_event_handler &rArr; rtgui_topwin_show &rArr; rtgui_topwin_activate_topwin &rArr; rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_ack
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_show
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_modal_enter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_add
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_update
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_touch
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_motion
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_mouse_btn
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_monitor_add
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_handle_kbd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> server.o(i.rtgui_server_entry)
</UL>
<P><STRONG><a name="[ba]"></a>_rtgui_wintitle_constructor</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, title.o(i._rtgui_wintitle_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rtgui_wintitle_constructor &rArr; rtgui_object_set_event_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> title.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>_rtgui_wintitle_deconstructor</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, title.o(i._rtgui_wintitle_deconstructor))
<BR>[Address Reference Count : 1]<UL><LI> title.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>_rtgui_topwin_activate_next</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_activate_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _rtgui_topwin_activate_next &rArr; _rtgui_topwin_only_activate &rArr; rtgui_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_topmost_window_shown
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_only_activate
</UL>
<BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
</UL>

<P><STRONG><a name="[127]"></a>_rtgui_topwin_clear_modal_tree</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_clear_modal_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rtgui_topwin_clear_modal_tree &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
</UL>

<P><STRONG><a name="[128]"></a>_rtgui_topwin_clip_to_region</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_clip_to_region))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = _rtgui_topwin_clip_to_region &rArr; rtgui_region_intersect &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_reset
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
</UL>

<P><STRONG><a name="[12b]"></a>_rtgui_topwin_could_show</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_could_show))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rtgui_topwin_could_show &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_show
</UL>

<P><STRONG><a name="[12c]"></a>_rtgui_topwin_deactivate</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, topwin.o(i._rtgui_topwin_deactivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _rtgui_topwin_deactivate &rArr; rtgui_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>

<P><STRONG><a name="[12f]"></a>_rtgui_topwin_draw_tree</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_draw_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 280 + In Cycle
<LI>Call Chain = _rtgui_topwin_draw_tree &rArr;  _rtgui_topwin_draw_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_draw_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_draw_tree
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>

<P><STRONG><a name="[130]"></a>_rtgui_topwin_free_tree</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, topwin.o(i._rtgui_topwin_free_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + In Cycle
<LI>Call Chain = _rtgui_topwin_free_tree &rArr;  _rtgui_topwin_free_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_free
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_free_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_free_tree
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
</UL>

<P><STRONG><a name="[133]"></a>_rtgui_topwin_get_focus_from_list</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_get_focus_from_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _rtgui_topwin_get_focus_from_list &rArr;  _rtgui_topwin_get_focus_from_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_focus_from_list
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_focus_from_list
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_focus
</UL>

<P><STRONG><a name="[134]"></a>_rtgui_topwin_get_next_shown</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, topwin.o(i._rtgui_topwin_get_next_shown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rtgui_topwin_get_next_shown &rArr; _rtgui_topwin_get_topmost_child_shown &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_topmost_child_shown
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
</UL>

<P><STRONG><a name="[136]"></a>_rtgui_topwin_get_root_win</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_get_root_win))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rtgui_topwin_get_root_win &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_move_whole_tree2top
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>

<P><STRONG><a name="[135]"></a>_rtgui_topwin_get_topmost_child_shown</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, topwin.o(i._rtgui_topwin_get_topmost_child_shown))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _rtgui_topwin_get_topmost_child_shown &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_topmost_window_shown
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_next_shown
</UL>

<P><STRONG><a name="[138]"></a>_rtgui_topwin_get_wnd_from_tree</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, topwin.o(i._rtgui_topwin_get_wnd_from_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = _rtgui_topwin_get_wnd_from_tree &rArr;  _rtgui_topwin_get_wnd_from_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_contains_point
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_wnd_from_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_wnd_from_tree
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_wnd_no_modaled
</UL>

<P><STRONG><a name="[255]"></a>_rtgui_topwin_in_layer</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, topwin.o(i._rtgui_topwin_in_layer))
<BR><BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_topmost_window_shown
</UL>

<P><STRONG><a name="[6c]"></a>_rtgui_topwin_mark_hidden</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, topwin.o(i._rtgui_topwin_mark_hidden))
<BR>[Address Reference Count : 1]<UL><LI> topwin.o(i.rtgui_topwin_hide)
</UL>
<P><STRONG><a name="[6d]"></a>_rtgui_topwin_mark_shown</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, topwin.o(i._rtgui_topwin_mark_shown))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _rtgui_topwin_mark_shown &rArr; rtgui_widget_show &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_show
</UL>
<BR>[Address Reference Count : 1]<UL><LI> topwin.o(i.rtgui_topwin_show)
</UL>
<P><STRONG><a name="[13b]"></a>_rtgui_topwin_move_whole_tree2top</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, topwin.o(i._rtgui_topwin_move_whole_tree2top))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _rtgui_topwin_move_whole_tree2top &rArr; _rtgui_topwin_get_root_win &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_before
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_root_win
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_tree_from_root
</UL>

<P><STRONG><a name="[126]"></a>_rtgui_topwin_only_activate</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, topwin.o(i._rtgui_topwin_only_activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _rtgui_topwin_only_activate &rArr; rtgui_send &rArr; rt_mq_send &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_activate_next
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>

<P><STRONG><a name="[13e]"></a>_rtgui_topwin_preorder_map</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_preorder_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _rtgui_topwin_preorder_map &rArr;  _rtgui_topwin_preorder_map (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_preorder_map
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_preorder_map
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_show
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
</UL>

<P><STRONG><a name="[13f]"></a>_rtgui_topwin_raise_in_sibling</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_raise_in_sibling))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _rtgui_topwin_raise_in_sibling &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_remove
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_insert_after
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_tree_from_root
</UL>

<P><STRONG><a name="[140]"></a>_rtgui_topwin_raise_tree_from_root</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_raise_tree_from_root))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _rtgui_topwin_raise_tree_from_root &rArr; _rtgui_topwin_move_whole_tree2top &rArr; _rtgui_topwin_get_root_win &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_in_sibling
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_move_whole_tree2top
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>

<P><STRONG><a name="[141]"></a>_rtgui_topwin_redraw_tree</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, topwin.o(i._rtgui_topwin_redraw_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + In Cycle
<LI>Call Chain = _rtgui_topwin_redraw_tree &rArr;  _rtgui_topwin_redraw_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_is_intersect
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_redraw_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_redraw
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_redraw_tree
</UL>

<P><STRONG><a name="[143]"></a>_rtgui_topwin_union_region_tree</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, topwin.o(i._rtgui_topwin_union_region_tree))
<BR><BR>[Stack]<UL><LI>Max Depth = 560 + In Cycle
<LI>Call Chain = _rtgui_topwin_union_region_tree &rArr;  _rtgui_topwin_union_region_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_assert_handler
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_union_rect
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_union_region_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_union_region_tree
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
</UL>

<P><STRONG><a name="[13c]"></a>rt_list_insert_after</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, topwin.o(i.rt_list_insert_after))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_in_sibling
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_move_whole_tree2top
</UL>

<P><STRONG><a name="[13d]"></a>rt_list_insert_before</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, topwin.o(i.rt_list_insert_before))
<BR><BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_move_whole_tree2top
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_add
</UL>

<P><STRONG><a name="[137]"></a>rt_list_isempty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, topwin.o(i.rt_list_isempty))
<BR><BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_update_clip
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_topmost_child_shown
</UL>

<P><STRONG><a name="[131]"></a>rt_list_remove</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, topwin.o(i.rt_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_raise_in_sibling
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_move_whole_tree2top
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_free_tree
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
</UL>

<P><STRONG><a name="[256]"></a>rtgui_topwin_redraw</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, topwin.o(i.rtgui_topwin_redraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = rtgui_topwin_redraw &rArr; _rtgui_topwin_redraw_tree &rArr;  _rtgui_topwin_redraw_tree (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_redraw_tree
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
</UL>

<P><STRONG><a name="[253]"></a>rtgui_topwin_search_in_list</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, topwin.o(i.rtgui_topwin_search_in_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + In Cycle
<LI>Call Chain = rtgui_topwin_search_in_list &rArr;  rtgui_topwin_search_in_list (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_search_in_list
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_show
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_modal_enter
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_append_monitor_rect
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_add
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate
</UL>

<P><STRONG><a name="[254]"></a>rtgui_topwin_update_clip</STRONG> (Thumb, 172 bytes, Stack size 48 bytes, topwin.o(i.rtgui_topwin_update_clip))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = rtgui_topwin_update_clip &rArr; rtgui_region_subtract_rect &rArr; rtgui_region_subtract &rArr; rtgui_op &rArr; rtgui_region_appendNonO &rArr; rtgui_rect_alloc &rArr; rt_realloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_graphic_driver_get_default
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_send
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_subtract_rect
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_rect
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_fini
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_get_topmost_window_shown
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_list_isempty
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_get_next_shown
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_topwin_clip_to_region
</UL>
<BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_resize
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_remove
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_move
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_hide
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_topwin_activate_topwin
</UL>

<P><STRONG><a name="[bc]"></a>_rtgui_widget_constructor</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, widget.o(i._rtgui_widget_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rtgui_widget_constructor &rArr; rtgui_object_set_event_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_font_default
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_client_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_with_extents
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>_rtgui_widget_destructor</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, widget.o(i._rtgui_widget_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = _rtgui_widget_destructor &rArr; rtgui_region_fini &rArr; rtgui_free &rArr; rt_free &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_get_type
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_fini
</UL>
<BR>[Address Reference Count : 1]<UL><LI> widget.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>_widget_moveto</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, widget.o(i._widget_moveto))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = _widget_moveto &rArr;  _widget_moveto (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_type_inherits_from
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rtgui_container_get_type
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_rect_moveto
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_init_with_extents
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_widget_moveto
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_move_to_logic
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_widget_moveto
</UL>

<P><STRONG><a name="[be]"></a>_rtgui_win_constructor</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, window.o(i._rtgui_win_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _rtgui_win_constructor &rArr; rtgui_object_set_event_handler &rArr; rt_assert_handler &rArr;  rt_kprintf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_object_set_event_handler
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>_rtgui_win_create_in_server</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, window.o(i._rtgui_win_create_in_server))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = _rtgui_win_create_in_server &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_kprintf
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_init
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_do_show
</UL>

<P><STRONG><a name="[14e]"></a>_rtgui_win_deal_close</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, window.o(i._rtgui_win_deal_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = _rtgui_win_deal_close &rArr; rtgui_win_hide &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_destroy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_exit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_hide
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_end_modal
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_destroy
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_close
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>

<P><STRONG><a name="[bf]"></a>_rtgui_win_destructor</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, window.o(i._rtgui_win_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = _rtgui_win_destructor &rArr; rtgui_server_post_event_sync &rArr; rtgui_send_sync &rArr; rt_mb_recv &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rt_free
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_destroy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_region_fini
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_server_post_event_sync
</UL>
<BR>[Address Reference Count : 1]<UL><LI> window.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>_win_handle_mouse_btn</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, window.o(i._win_handle_mouse_btn))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _win_handle_mouse_btn &rArr; rtgui_container_dispatch_mouse_event &rArr; rtgui_widget_focus &rArr; rtgui_widget_unfocus &rArr;  rtgui_widget_unfocus (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_mouse_event
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>

<P><STRONG><a name="[24f]"></a>rtgui_dc_draw_hline</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, window.o(i.rtgui_dc_draw_hline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_dc_draw_hline
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
</UL>

<P><STRONG><a name="[250]"></a>rtgui_dc_draw_vline</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, window.o(i.rtgui_dc_draw_vline))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtgui_dc_draw_vline
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
</UL>

<P><STRONG><a name="[251]"></a>rtgui_dc_fill_rect</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, window.o(i.rtgui_dc_fill_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtgui_dc_fill_rect
</UL>
<BR>[Called By]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_theme_draw_win
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_ondraw
</UL>

<P><STRONG><a name="[268]"></a>rtgui_win_ondraw</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, window.o(i.rtgui_win_ondraw))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = rtgui_win_ondraw &rArr; rtgui_dc_begin_drawing &rArr; rtgui_dc_hw_create &rArr; rtgui_malloc &rArr; rt_malloc &rArr; rt_sem_take &rArr; rt_schedule &rArr; _rt_scheduler_stack_check &rArr; rt_kprintf &rArr; rt_vsnprintf &rArr; print_number
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_get_rect
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_end_drawing
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_begin_drawing
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_container_dispatch_event
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_app_self
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_dc_fill_rect
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_widget_onpaint
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtgui_win_event_handler
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
